<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Блог TinyOps</title>
	<subtitle>О технологиях, подходах и решении проблем простым языком</subtitle>
	<link href="https://b.tinyops.ru/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://b.tinyops.ru"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-08-10T00:00:00+00:00</updated>
	<id>https://b.tinyops.ru/atom.xml</id>
	<entry xml:lang="en">
		<title>Как добавить самоподписной SSL-сертификат для JVM в Docker</title>
		<published>2021-08-10T00:00:00+00:00</published>
		<updated>2021-08-10T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/how-to-install-self-signed-ssl-cert-in-docker/" type="text/html"/>
		<id>https://b.tinyops.ru/how-to-install-self-signed-ssl-cert-in-docker/</id>
		<content type="html">&lt;p&gt;Представим что у нас есть Java-приложение, которое делает запросы к другим Web-сервисам. В свою очередь, Web-сервисы работают с HTTPS, но сертификат доверенный только для домена компании.&lt;&#x2F;p&gt;
&lt;p&gt;В логах приложения подобные ошибки:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.security.ssl.Alert.createSSLException(Alert.java:131)
    at sun.security.ssl.TransportContext.fatal(TransportContext.java:324)
    at sun.security.ssl.TransportContext.fatal(TransportContext.java:267)
    at sun.security.ssl.TransportContext.fatal(TransportContext.java:262)
    at sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts(CertificateMessage.java:654)
    at sun.security.ssl.CertificateMessage$T12CertificateConsumer.onCertificate(CertificateMessage.java:473)
    at sun.security.ssl.CertificateMessage$T12CertificateConsumer.consume(CertificateMessage.java:369)
    at sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:377)
    at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:444)
    at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:422)
    at sun.security.ssl.TransportContext.dispatch(TransportContext.java:182)
    at sun.security.ssl.SSLTransport.decode(SSLTransport.java:152)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Нам необходимо добавить самоподписной корневой сертификат в хранилище сертификатов JVM.&lt;&#x2F;p&gt;
&lt;p&gt;В JVM сертификаты хранятся в файле-хранилище &lt;code&gt;${JAVA_HOME}&#x2F;jre&#x2F;lib&#x2F;cacerts&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Находим где располагается JVM, для этого заходим в контейнер приложения:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it app &#x2F;bin&#x2F;bash
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;и ищем:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;root@458b6bbf28b5:&#x2F;app# whereis java
java: &#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;bin&#x2F;java
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Соответственно, наш &lt;code&gt;JAVA_HOME&lt;&#x2F;code&gt; это &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;openjdk-8&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь выходим из контейнера и копируем каталог &lt;code&gt;security&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;docker cp app:&#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;jre&#x2F;lib&#x2F;security .
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Правим &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; для проброса каталога внутрь контейнера:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;version: &#x27;3.3&#x27;

services:

  app:
    container_name: app
    image: registry.company.ru&#x2F;app:1.3.7-12
    restart: always
    volumes:
     - .&#x2F;application.properties:&#x2F;app&#x2F;application.properties
     - .&#x2F;data:&#x2F;app&#x2F;data
     - .&#x2F;logs:&#x2F;app&#x2F;logs
     - .&#x2F;security:&#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;jre&#x2F;lib&#x2F;security
    ports:
     - &quot;35000:8080&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Добавляем сертификат в файл &lt;code&gt;cacerts&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;keytool -importcert -keystore security&#x2F;cacerts -file custom-ca.crt -alias &quot;custom-ca&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Пароль по умолчанию для доступа в хранилище &lt;code&gt;changeit&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Рестартуем приложение:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose down
docker-compose up -d
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Установка Syncthing для CentOS 7</title>
		<published>2021-05-14T00:00:00+00:00</published>
		<updated>2021-07-14T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/install-syncthing-centos7/" type="text/html"/>
		<id>https://b.tinyops.ru/install-syncthing-centos7/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;syncthing&#x2F;syncthing-logo.png&quot; alt=&quot;Логотип приложения Syncthing&quot; title=&quot;Логотип приложения Syncthing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Syncthing — это приложение для синхронизации файлов между устройствами. Авторы предпочитают дистрибутивы аля Debian\Ubuntu, 
поэтому для большинства остальных ОС требуется ручная установка.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-skachivaem-distributiv&quot;&gt;1. Скачиваем дистрибутив&lt;&#x2F;h3&gt;
&lt;p&gt;Скачиваем свежую версию с GitHub &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syncthing&#x2F;syncthing&#x2F;releases&#x2F;latest&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;syncthing&#x2F;syncthing&#x2F;releases&#x2F;latest&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Файл будет выглядеть подобным образом &lt;code&gt;syncthing-linux-arm64-v1.16.1.tar.gz&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-raspakovyvaem&quot;&gt;2. Распаковываем&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar xvzf syncthing-linux-arm64-v1.16.1.tar.gz
cd syncthing-linux-arm64-v1.16.1
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Будет примерно такое содержимое (лишнее убрал):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;├── etc
│   ├── linux-systemd
│   │   ├── README.md
│   │   ├── system
│   │   │   ├── syncthing-resume.service
│   │   │   └── syncthing@.service  &#x2F;&#x2F; скрипт для установки от имени пользователя
│   │   └── user
│   │       └── syncthing.service &#x2F;&#x2F; скрипт для установки от имени системы
└── syncthing
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;В архиве присутствует два вида конфигурации:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Системная служба&lt;&#x2F;li&gt;
&lt;li&gt;Пользовательская служба&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В первом случае Syncthing будет запускаться сразу при загрузке операционной системы и 
работать независимо от сессии пользователя.&lt;&#x2F;p&gt;
&lt;p&gt;Пользовательская служба ограничена активной сессией (ssh или графической). Например, пользователь зашёл 
в графический интерфейс (Gnome, KDE и т. д.) и запустился Syncthing.&lt;&#x2F;p&gt;
&lt;p&gt;В первом варианте данные будут синхронизированы быстрей.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-ustanavlivaem-ispolniaemyi-fail&quot;&gt;3. Устанавливаем исполняемый файл&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo cp syncthing &#x2F;usr&#x2F;local&#x2F;bin&#x2F;syncthing
sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;syncthing
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-ustanavlivaem-sluzhbu&quot;&gt;4. Устанавливаем службу&lt;&#x2F;h3&gt;
&lt;p&gt;На примере пользователя &lt;code&gt;eugene&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Копируем файлы службы из дистрибутива:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cp etc&#x2F;linux-systemd&#x2F;system&#x2F;*.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Разрешаем автозапуск при загрузке ОС и запускаем службу:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemctl enable syncthing@myuser.service
systemctl start syncthing@myuser.service
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-proveriaem-rabotu-syncthing&quot;&gt;5. Проверяем работу Syncthing&lt;&#x2F;h3&gt;
&lt;p&gt;Заходим в Web-интерфейс &lt;code&gt;http:&#x2F;&#x2F;имя-сервера:8384&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drugie-stat-i-na-temu&quot;&gt;Другие статьи на тему&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;syncthing-as-windows-service&#x2F;&quot;&gt;Запуск Syncthing в виде службы Windows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Статьи про другие приложения с тэгом &lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&#x2F;&quot;&gt;#awesomeware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как управлять dotfiles</title>
		<published>2021-04-03T00:00:00+00:00</published>
		<updated>2021-07-14T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/kak-upravlyat-dotfiles/" type="text/html"/>
		<id>https://b.tinyops.ru/kak-upravlyat-dotfiles/</id>
		<content type="html">&lt;p&gt;Dotfiles — это текстовые конфигурационные файлы в операционных системах Unix и Linux. 
Например, &lt;code&gt;.bash_profile&lt;&#x2F;code&gt;, &lt;code&gt;.vimrc&lt;&#x2F;code&gt; и т.д. Они называются именно так потому что обычно имя файла начинается со знака точки.
Тем не менее часть файлов конфигурации не начинаются со знака точки, но в то же время относятся к &lt;code&gt;dotfiles&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problemy-s-dotfiles&quot;&gt;Проблемы с dotfiles&lt;&#x2F;h3&gt;
&lt;p&gt;Что может быть проще текстовых файлов?
Чем больше таких файлов, тем сложней ими управлять, требуется определённый подход.&lt;&#x2F;p&gt;
&lt;p&gt;Самые популярные проблемы:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;У меня несколько компьютеров. Как мне перемещать файлы между ними? Как синхронизировать изменения?&lt;&#x2F;li&gt;
&lt;li&gt;Конфигурация Vim (файл &lt;code&gt;.vimrc&lt;&#x2F;code&gt;) может быть максимально подходить для одного компьютера и быть избыточной для всех остальных&lt;&#x2F;li&gt;
&lt;li&gt;В ваших &lt;code&gt;dotfiles&lt;&#x2F;code&gt; может быть приватная информация, которую нельзя публиковать в git&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;organizatsionnyi-podkhod&quot;&gt;Организационный подход&lt;&#x2F;h2&gt;
&lt;p&gt;Если вы разработчик, то работа с &lt;code&gt;dotfiles&lt;&#x2F;code&gt;, хранение и усовершенствование, для вас самый долгий проект из всех над которыми вы работали. 
В связи с этим имеет смысл организовать свой проект дисциплинированно, для удобства сопровождения и расширяемости.&lt;&#x2F;p&gt;
&lt;p&gt;Многие пользователи хранят &lt;code&gt;dotfiles&lt;&#x2F;code&gt; в git, потому что это очень удобно.
Можно &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;search?q=dotfiles&quot;&gt;найти более 150 тысяч примеров на Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Преимущества такого подхода:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;У вас будет резервная копия, которая убережёт файлы от потери и повреждений:
&lt;ul&gt;
&lt;li&gt;Вышел из строя жёсткий диск&lt;&#x2F;li&gt;
&lt;li&gt;Случайное удаление&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;История изменений:
&lt;ul&gt;
&lt;li&gt;Возможность свободно экспериментировать с настройками и легко откатить изменения&lt;&#x2F;li&gt;
&lt;li&gt;Возможность посмотреть настройки за все время существования ваших dotfiles, даже через несколько лет спустя.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Для &lt;code&gt;dotfiles&lt;&#x2F;code&gt; лучше выделить отдельный каталог — &lt;code&gt;.dotfiles&lt;&#x2F;code&gt; в корне домашней директории. 
Хранить в системе контроля версий домашний каталог не рекомендуется, т. к. усложнит поддержку &lt;code&gt;dotfiles&lt;&#x2F;code&gt;, 
а также команда типа &lt;code&gt;git clean&lt;&#x2F;code&gt; может удалить все файлы, и даже те, которые не входят в состав репозитория.&lt;&#x2F;p&gt;
&lt;p&gt;В качестве системы контроля версий подойдёт любая: git, mercurial, svn и т. д. Я использую git.&lt;&#x2F;p&gt;
&lt;p&gt;Несмотря на удобство систем контроля версий, не рекомендуется копировать один в один чужие &lt;code&gt;dotfiles&lt;&#x2F;code&gt;, 
без понимания того, для чего сделаны те или иные настройки. 
&lt;code&gt;Dotfiles&lt;&#x2F;code&gt; должны быть написаны под вас, чужие — могут служить источником знаний или вдохновения.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;s-chego-nachat&quot;&gt;С чего начать&lt;&#x2F;h2&gt;
&lt;p&gt;Создадим каталог и репозиторий:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir ~&#x2F;.dotfiles &amp;&amp; cd ~&#x2F;.dotfiles
git init
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Создадим на Github отдельный репозиторий &lt;code&gt;dotfiles&lt;&#x2F;code&gt;. Копируем ссылку и добавляем к локальному:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin git@github.com:your-user&#x2F;dotfiles.git
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Для примера добавим конфигурацию vim в наши dotfiles.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p ~&#x2F;.dotfiles&#x2F;vim&#x2F;plugins
cp ~&#x2F;.vimrc ~&#x2F;.dotfiles&#x2F;vim
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Добавим в git и запушим изменения на GitHub:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;git checkout main
git add *
git commit -a -m &quot;[+] add .vimrc&quot;
git push
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Здесь стоит отметить, что я использую ветку &lt;code&gt;main&lt;&#x2F;code&gt; вместо &lt;code&gt;master&lt;&#x2F;code&gt;, т. к. так заведено на GitHub.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ustanovka-dotfiles&quot;&gt;Установка dotfiles&lt;&#x2F;h2&gt;
&lt;p&gt;Продолжаем пример с &lt;code&gt;.vimrc&lt;&#x2F;code&gt;-файлом. Удалим текущий и создадим ссылку на тот что хранится в dotfiles:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm -f ~&#x2F;.vimrc
ln -s ~&#x2F;.dotfiles&#x2F;vim&#x2F;.vimrc ~&#x2F;.vimrc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Когда ваш репозиторий будет наполнен файлами, имеет смысл написать скрипт, который будет создавать правильные ссылки в домашнем каталоге.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zavisimosti-i-plaginy&quot;&gt;Зависимости и плагины&lt;&#x2F;h2&gt;
&lt;p&gt;Помимо файлов конфигурации для приложений в &lt;code&gt;dotfiles&lt;&#x2F;code&gt; можно хранить удобные скрипты и плагины. Нет смысла добавлять плагины в виде файлов в наш репозиторий, но имеет смысл добавить их в виде суб-модулей.&lt;&#x2F;p&gt;
&lt;p&gt;Я использую плагин &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;preservim&#x2F;nerdtree&quot;&gt;NERDTree&lt;&#x2F;a&gt; для vim. Добавим репозиторий проекта в виде суб-модуля:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git submodule add https:&#x2F;&#x2F;github.com&#x2F;preservim&#x2F;nerdtree vim&#x2F;plugins&#x2F;nerdtree
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ustanovka-zavisimostei-i-plaginov&quot;&gt;Установка зависимостей и плагинов&lt;&#x2F;h2&gt;
&lt;p&gt;Установка и обновление до последних версий:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git submodule update --init --recursive
git submodule update --init --remote
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Создаём ссылку (symlink) на каталог с плагинами:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ln -s ~&#x2F;.dotfiles&#x2F;vim&#x2F;plugins ~&#x2F;.vim&#x2F;plugged
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Каталог &lt;code&gt;~&#x2F;vim&#x2F;plugged&lt;&#x2F;code&gt; может отличаться от вашего, я использую рекомендованный от &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;vim-plug&quot;&gt;vim-plug&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spetsifichnye-lokal-nye-nastroiki&quot;&gt;Специфичные локальные настройки&lt;&#x2F;h2&gt;
&lt;p&gt;При использовании &lt;code&gt;dotfiles&lt;&#x2F;code&gt; на множестве машин большая часть конфигурации будет одна и та же. Но возможны небольшие различия.&lt;&#x2F;p&gt;
&lt;p&gt;Например, на одной машине вам нужна поддержка Rust для Vim, а на всех остальных — нет. Также могут отличаться набор закладок для &lt;code&gt;nnn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Для хранения различий можно использовать разные ветви в git, но это очень быстро превратится в хаос.&lt;&#x2F;p&gt;
&lt;p&gt;Один из подходов — иметь главный репозиторий для dotfiles, с файлами, которые подходят для всех машин, а также отдельный репозиторий dotfiles_local для персональных настроек под каждую машину.&lt;&#x2F;p&gt;
&lt;p&gt;В репозитории &lt;code&gt;dotfiles_local&lt;&#x2F;code&gt; каждая ветвь именуется именем машины. Например, &lt;code&gt;home-pc&lt;&#x2F;code&gt;, &lt;code&gt;work-pc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kak-podgruzhat-spetsifichnye-nastroiki&quot;&gt;Как подгружать специфичные настройки&lt;&#x2F;h3&gt;
&lt;p&gt;Для bash добавляем в &lt;code&gt;~&#x2F;.bashrc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;if [ -f ~&#x2F;.bashrc_local ]; then
    source ~&#x2F;.bashrc_local
fi
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Для git добавляем в &lt;code&gt;~&#x2F;.gitconfig&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;[include]
	path = ~&#x2F;.gitconfig_local
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Для Vim, добавляем в файл &lt;code&gt;.vimrc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vim&quot; class=&quot;language-vim &quot;&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;let $LOCALFILE=expand(&quot;~&#x2F;.vimrc_local&quot;)
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;spetsial-nye-skripty&quot;&gt;Специальные скрипты&lt;&#x2F;h2&gt;
&lt;p&gt;Если у вас есть какие-то скрипты, которые вы используете в своей работе, их тоже можно добавить в dotfiles. Например, в каталог &lt;code&gt;.dotfiles&#x2F;bin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Затем в &lt;code&gt;.bashrc&lt;&#x2F;code&gt; добавляем их в переменную &lt;code&gt;PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export PATH=~&#x2F;.dotfiles&#x2F;bin:${PATH}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Передача файлов и текста с помощью croc</title>
		<published>2021-03-06T00:00:00+00:00</published>
		<updated>2021-03-06T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/transfer-data-with-croc/" type="text/html"/>
		<id>https://b.tinyops.ru/transfer-data-with-croc/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;schollz&#x2F;croc&quot;&gt;croc&lt;&#x2F;a&gt; - это консольная утилита для удобной и безопасной передачи данных между двумя устройствами.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;croc.png&quot; alt=&quot;Репозитарий croc на Github&quot; title=&quot;Репозиторий croc на Github&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Основные возможности:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Передача данных (файлы, текст) между устройствами (с использованием relay);&lt;&#x2F;li&gt;
&lt;li&gt;End-to-end шифрование (авторы утилиты не смогут прочитать, то что вы передаёте);&lt;&#x2F;li&gt;
&lt;li&gt;Кросс-платформа (поддерживаются все популярные ОС);&lt;&#x2F;li&gt;
&lt;li&gt;Можно передавать сразу несколько файлов;&lt;&#x2F;li&gt;
&lt;li&gt;Поддержка докачки;&lt;&#x2F;li&gt;
&lt;li&gt;Не нужно открывать порты и настраивать port-forwarding;&lt;&#x2F;li&gt;
&lt;li&gt;С ориентиром на IPV6 и поддержкой IPV4;&lt;&#x2F;li&gt;
&lt;li&gt;Поддержка работы через Proxy типа Tor.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kak-ustanovit&quot;&gt;Как установить&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl https:&#x2F;&#x2F;getcroc.schollz.com | bash
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;macos&quot;&gt;MacOS&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;brew install croc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;&#x2F;h3&gt;
&lt;p&gt;Если вы используете менеджер пакетов &lt;a href=&quot;https:&#x2F;&#x2F;chocolatey.org&#x2F;&quot;&gt;Chocolatey&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;choco install croc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если вы используете менеджер пакетов &lt;a href=&quot;https:&#x2F;&#x2F;scoop.sh&#x2F;&quot;&gt;Scoop&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;scoop install croc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kak-ispol-zovat&quot;&gt;Как использовать&lt;&#x2F;h2&gt;
&lt;p&gt;Например, нам нужно передать файл &lt;code&gt;archive.zip&lt;&#x2F;code&gt; с одного устройства на другое:&lt;&#x2F;p&gt;
&lt;p&gt;Инициируем передачу на устройстве с которого отправляем файл:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;croc send archive.zip
Sending &#x27;archive.zip&#x27; (3.3 kB)
Code is: sweden-light-jacket
On the other computer run

croc sweden-light-jacket
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Утилита сгенерировала секретное слово, которое мы должны использовать на принимающей стороне. Также croc подсказывает 
какую команду мы должны запустить на втором устройстве:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;croc sweden-light-jacket
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Запускаем:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;croc sweden-light-jacket
Accept &#x27;archive.zip&#x27; (3.3 kB)? (y&#x2F;n) y

Receiving (&lt;-123.100.94.21:12345)
archive.zip 100% |████████████████████| (3.3&#x2F;3.3 kB, 12.864 kB&#x2F;s)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kak-otpravit-tekst&quot;&gt;Как отправить текст&lt;&#x2F;h3&gt;
&lt;p&gt;Аналогично файлу, но команда запуска на исходном устройстве будет такой:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;croc send --text &quot;ВАШ ТЕКСТ&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;poleznye-ssylki&quot;&gt;Полезные ссылки&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;schollz&#x2F;croc&quot;&gt;Репозиторий на GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;schollz.com&#x2F;software&#x2F;croc6&quot;&gt;Пост автора&lt;&#x2F;a&gt; с подробностями об утилите (на английском)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&#x2F;&quot;&gt;Другие посты про крутые приложения&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Новая тема DDV для Zola</title>
		<published>2021-03-04T00:00:00+00:00</published>
		<updated>2021-04-04T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/ddv-theme-for-zola/" type="text/html"/>
		<id>https://b.tinyops.ru/ddv-theme-for-zola/</id>
		<content type="html">&lt;p&gt;Как-то раз в рассылке Hackernews наткнулся на &lt;a href=&quot;https:&#x2F;&#x2F;drewdevault.com&#x2F;&quot;&gt;блог Drew DeVault&lt;&#x2F;a&gt;.
Мне понравилась визуальная чистота и простота его блога. Вот как блог выглядел в тот момент:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;zola&#x2F;ddv-drew-devault-blog.png&quot; alt=&quot;Блог Drew DeVault&quot; title=&quot;Блог Drew DeVault&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;И я решил собрать такой же внешний вид, но для &lt;a href=&quot;&#x2F;zola-intro&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;. К счастью, Drew не использовал никаких framework&#x27;ов,
кучи внешних зависимостей и сделал всё сам. Портировать было легко.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;otlichiia&quot;&gt;Отличия&lt;&#x2F;h2&gt;
&lt;p&gt;Я не стал портировать тему один в один, т. к. автор сделал правую панель специфичной. 
Думаю мало кому нужны ссылки на sourcehut, peertube, pgp и gemini. Поэтому я добавил ссылки на более популярные профили:
web-сайт, github, twitter и instagram. Дополнительно добавил страницу &amp;quot;О блоге&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Демо: &lt;a href=&quot;https:&#x2F;&#x2F;ddv-theme.tinyops.ru&quot;&gt;https:&#x2F;&#x2F;ddv-theme.tinyops.ru&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-ustanovit-temu&quot;&gt;Как установить тему&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Заходим в каталог с вашим блогом&lt;&#x2F;li&gt;
&lt;li&gt;Клонируем репозитарий с темой:&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;tinyops-ru&#x2F;ddv-theme themes&#x2F;ddv
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;В файле конфигурации &lt;code&gt;config.toml&lt;&#x2F;code&gt; указываем:&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;theme=&quot;ddv&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;kak-nastroit-temu&quot;&gt;Как настроить тему&lt;&#x2F;h2&gt;
&lt;p&gt;Все переменные конфигурации в секции &lt;code&gt;[extra]&lt;&#x2F;code&gt; файла &lt;code&gt;themes&#x2F;ddv&#x2F;config.toml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poleznye-ssylki&quot;&gt;Полезные ссылки&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Другие посты с тэгом &lt;a href=&quot;&#x2F;tags&#x2F;zola&#x2F;&quot;&gt;zola&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Настройка безопасности для SSH-сервера</title>
		<published>2020-11-15T00:00:00+00:00</published>
		<updated>2020-11-15T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/ssh-server-security-fundamentals/" type="text/html"/>
		<id>https://b.tinyops.ru/ssh-server-security-fundamentals/</id>
		<content type="html">&lt;p&gt;SSH (Secure Shell) - это протокол прикладного уровня с шифрованием трафика, а также самый распространённый протокол 
удалённого доступа к Linux\Unix-серверам. Самая популярная реализация серверной части называется OpenSSH.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ssh&#x2F;ssh-security.png&quot; alt=&quot;Терминал Linux&quot; title=&quot;Терминал Linux&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Тем не менее, даже самую безопасную систему на свете можно сделать уязвимой благодаря настройке. Во многих дистрибутивах
служба SSH имеет уязвимую конфигурацию.&lt;&#x2F;p&gt;
&lt;p&gt;Две самых распространённых уязвимости:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Разрешён удалённый доступ пользователю &lt;code&gt;root&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;Не указан список пользователей, которым разрешён доступ.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;В некоторых дистрибутивах разрешён вход для пользователей с пустыми паролями. 
Проблема безопасности усугубляется ещё и тем что по умолчанию команда &lt;code&gt;useradd&lt;&#x2F;code&gt; создаёт пользователя с пустым паролем.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;perebor-loginov-i-parolei&quot;&gt;Перебор логинов и паролей&lt;&#x2F;h2&gt;
&lt;p&gt;Несмотря на то что существуют различные векторы атак на службу SSH, самая популярная атака это перебор логинов и паролей.
Перебор ведут по самым распространённым именам пользователей и паролей: root, admin, user, test и т. д.&lt;&#x2F;p&gt;
&lt;p&gt;В наши дни перебор паролей ведут чаще автоматизированными средствами нежели вручную. Поэтому при входе на удалённый сервер неудивительно
увидеть такую картину: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;[user@pc] # ssh server
Last failed login: Sun Nov 15 16:12:10 MSK 2020 from 112.85.42.174 on ssh:notty
There were 13925 failed login attempts since the last successful login.
Last login: Fri Nov 13 17:08:30 2020 from 123.33.12.100
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Далее мы настроим сервер так чтобы существенно усложнить жизнь злоумышленникам.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nastroika-minimal-no-rekomenduemoi-konfiguratsii&quot;&gt;Настройка минимально рекомендуемой конфигурации&lt;&#x2F;h2&gt;
&lt;p&gt;Несмотря на то что это минимально-рекомендуемая конфигурация, она отразит более 99% атак на SSH-сервер.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# Запрещаем вход пользователю root через удалённый доступ
PermitRootLogin no

# Разрешаем подключение только для указанных пользователей
AllowUsers user1 user2 user3

# Меняем порт на нестандартный
Port 14819

# Запрещаем вход пользователям с пустыми паролями
PermitEmptyPasswords no

# Отключаем неиспользуемые способы аутентификации
KerberosAuthentication no
GSSAPIAuthentication no

# Отключаем возможность доступа к графическим приложениям
X11Forwarding no

# Отключаем возможности туннелирования, использовать сервер в качестве промежуточного узла
AllowAgentForwarding no
AllowTcpForwarding no
PermitTunnel no
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;nastroika-usilennoi-bezopasnosti&quot;&gt;Настройка усиленной безопасности&lt;&#x2F;h2&gt;
&lt;p&gt;Помимо минимально рекомендуемых настроек, можно запретить доступ к порту сервиса и отключить вход по логину и паролю. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;blokiruem-dostup-k-portu-ssh-dlia-vsekh-krome-doverennykh-ip&quot;&gt;Блокируем доступ к порту SSH для всех кроме доверенных IP&lt;&#x2F;h3&gt;
&lt;p&gt;Например, с помощью firewalld:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;firewall-cmd --permanent --zone=public --remove-service=ssh
firewall-cmd --permanent --zone=trusted --add-service=ssh
firewall-cmd --reload
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;otkliuchaem-dostup-po-loginu-i-paroliu&quot;&gt;Отключаем доступ по логину и паролю&lt;&#x2F;h3&gt;
&lt;p&gt;Несмотря на то что аутентификация по ключам это более безопасный и удобный способ работы с удалёнными серверами, большинство 
инженеров предпочитаю работать с логинами и паролями.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;PasswordAuthentication no
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;После этого потребуется создать ключ для пользователя:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;ssh-keygen
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;А затем скопировать его на удалённый сервер:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;ssh-copy-id user@server
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;proverka-i-primenenie-nastroek&quot;&gt;Проверка и применение настроек&lt;&#x2F;h2&gt;
&lt;p&gt;Проверяем что настройки корректные:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;sshd -t
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если приложение не сообщило об ошибках, значит всё хорошо.&lt;&#x2F;p&gt;
&lt;p&gt;Перезапускаем службу:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;systemctl restart sshd
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Запуск Syncthing в виде службы Windows</title>
		<published>2020-11-11T00:00:00+00:00</published>
		<updated>2021-05-14T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/syncthing-as-windows-service/" type="text/html"/>
		<id>https://b.tinyops.ru/syncthing-as-windows-service/</id>
		<content type="html">&lt;p&gt;Syncthing - это приложение для синхронизации каталогов между сетевыми устройствами. В качестве сетевых устройств могут
выступать настольные системы, ноутбуки и мобильные устройства. Syncthing можно запустить во всех популярных операционных системах.&lt;&#x2F;p&gt;
&lt;p&gt;Если на мобильных устройствах приложение стартует самостоятельно как служба, то на настольных системах необходима настройка.
Вы можете запустить приложение в сеансе текущего пользователя, но запускать при каждом запуске компьютера неудобно.&lt;&#x2F;p&gt;
&lt;p&gt;Официальное руководство &lt;a href=&quot;https:&#x2F;&#x2F;docs.syncthing.net&#x2F;users&#x2F;autostart.html&quot;&gt;предлагает&lt;&#x2F;a&gt; два способа:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Запускать через планировщик задач Windows;&lt;&#x2F;li&gt;
&lt;li&gt;Запускать в виде службы.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Первый способ костыльный и перестанет работать если пользователь поменяет пароль, поэтому лучше настроить службу Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ustanovka-nssm&quot;&gt;Установка NSSM&lt;&#x2F;h3&gt;
&lt;p&gt;Для настройки необходимо использовать утилиту которая умеет запускать Windows-приложения как службы. 
Подобных утилит достаточно много, но мы возьмём одну из самых удобных - NSSM (The Non-Sucking Service Manager).
Скачиваем с официального сайта дистрибутив &lt;a href=&quot;https:&#x2F;&#x2F;nssm.cc&#x2F;download&quot;&gt;https:&#x2F;&#x2F;nssm.cc&#x2F;download&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Распаковываем куда-нибудь, например, в &lt;code&gt;c:\apps\nssm&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Затем складываем файл &lt;code&gt;nssm.exe&lt;&#x2F;code&gt; так, чтобы полный путь до приложения был следующим - &lt;code&gt;c:\apps\nssm\nssm.exe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sozdanie-sluzhby-windows&quot;&gt;Создание службы Windows&lt;&#x2F;h3&gt;
&lt;p&gt;Допустим полный путь до исполняемого файла Syncthing - &lt;code&gt;c:\apps\syncthing\syncthing.exe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Запускаем командную строку Windows с правами локального администратора и создаём службу:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;c:\apps\nssm\nssm.exe install Syncthing c:\apps\syncthing\syncthing.exe
c:\apps\nssm\nssm.exe set Syncthing AppDirectory c:\apps\syncthing
c:\apps\nssm\nssm.exe set Syncthing start SERVICE_DELAYED_AUTO_START
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nastraivaem-pol-zovatelia&quot;&gt;Настраиваем пользователя&lt;&#x2F;h3&gt;
&lt;p&gt;В целях безопасности рекомендуется запускать Syncthing от имени пользователя без привилегий администратора. &lt;&#x2F;p&gt;
&lt;p&gt;Заходим в оснастку служб Windows, переходим в свойств службы &lt;code&gt;Syncthing&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;syncthing&#x2F;service-properties.png&quot; alt=&quot;Свойства службы Syncthing&quot; title=&quot;Свойства службы Syncthing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Выбираем существующего пользователя и указываем пароль.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;syncthing&#x2F;service-run-as.png&quot; alt=&quot;Выбор пользователя для запуска службы&quot; title=&quot;Выбор пользователя для запуска службы&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Жмём &amp;quot;ОК&amp;quot; и перезапускаем службу.&lt;&#x2F;p&gt;
&lt;p&gt;Через некоторое время приложение будет доступно по ссылке &lt;a href=&quot;http:&#x2F;&#x2F;127.0.0.1:8384&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:8384&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drugie-stat-i&quot;&gt;Другие статьи&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;install-syncthing-centos7&#x2F;&quot;&gt;Установка Syncthing для CentOS 7&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Статьи про другие приложения с тэгом &lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&#x2F;&quot;&gt;#awesomeware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Улучшаем работу в консоли с помощью tmux</title>
		<published>2020-11-02T00:00:00+00:00</published>
		<updated>2020-11-02T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/tmux/" type="text/html"/>
		<id>https://b.tinyops.ru/tmux/</id>
		<content type="html">&lt;p&gt;tmux - это терминальный мультиплексор (terminal multiplexer). Терминальный мультиплексор - это приложение, 
которое способно объединять несколько сессий в одном псевдо-графическом интерфейсе.&lt;&#x2F;p&gt;
&lt;p&gt;Главные возможности tmux:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Сохранность сессии.&lt;&#x2F;li&gt;
&lt;li&gt;Возможность использовать множество суб-окон в главном окне.&lt;&#x2F;li&gt;
&lt;li&gt;Возможность поделиться сессией. К сессии мультиплексора могут подключаться несколько пользователей.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Сохранность текущей сессии&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;По умолчанию, все интерактивные сессии посылают сигнал SIGHUP всем процессам запущенным в текущей сессии при отключении.
Если произошёл обрыв связи, то все команды которые вы запускали завершатся раньше ожидаемого времени выполнения.&lt;&#x2F;p&gt;
&lt;p&gt;При первом запуске мультиплексор создаёт отдельную сессию, которая не привязана к вашему соединению. Например, 
вы можете отключиться от SSH, но сессия будет активна на сервере. Затем вы можете вернуться на сервер и вернуться
в сессию с помощью команды:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;tmux attach
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;или с указанием имени сессии:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;tmux attach -t name
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ustanovka-tmux&quot;&gt;Установка tmux&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;centos-fedora-rhel-oracle-linux&quot;&gt;CentOS, Fedora, RHEL, Oracle Linux&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;sudo yum install -y tmux
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ubuntu-debian&quot;&gt;Ubuntu, Debian&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;sudo apt install tmux
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;archlinux&quot;&gt;ArchLinux&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;sudo pacman -S tmux
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kak-ispol-zovat&quot;&gt;Как использовать&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;sozdanie-sessii&quot;&gt;Создание сессии&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;tmux new -s name
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;tmux отобразит пустой терминал на подобие такого:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;linux&#x2F;tmux&#x2F;tmux-start.png&quot; alt=&quot;Стартовое окно tmux&quot; title=&quot;Стартовое окно tmux&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;prefiks-dlia-komand&quot;&gt;Префикс для команд&lt;&#x2F;h4&gt;
&lt;p&gt;Для использования команд нужно использовать комбинацию-префикс.
По умолчанию, префикс - &lt;code&gt;ctrl+b&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Например, чтобы создать новое окно, нажимаем &lt;code&gt;ctrl+b&lt;&#x2F;code&gt;, затем отпускаем и нажимаем &lt;code&gt;c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sozdanie-novogo-okna&quot;&gt;Создание нового окна&lt;&#x2F;h4&gt;
&lt;p&gt;Комбинация: &lt;code&gt;prefix, c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;perekliuchenie-mezhdu-oknami&quot;&gt;Переключение между окнами&lt;&#x2F;h4&gt;
&lt;p&gt;Вперёд: &lt;code&gt;prefix, n&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Назад: &lt;code&gt;prefix, p&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Переключение по номеру окна: &lt;code&gt;prefix + N&lt;&#x2F;code&gt;, где &lt;code&gt;N&lt;&#x2F;code&gt; - это номер окна.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;razdelenie-okon-i-sozdanie-panelei&quot;&gt;Разделение окон и создание панелей&lt;&#x2F;h4&gt;
&lt;p&gt;Комбинация: &lt;code&gt;prefix, &amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Например, можно разместить сверху вывод &lt;code&gt;htop&lt;&#x2F;code&gt;, а снизу &lt;code&gt;vmstat&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;linux&#x2F;tmux&#x2F;tmux-panes.png&quot; alt=&quot;Разделение окна на панели&quot; title=&quot;Разделение окна на панели&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;perekliuchenie-mezhdu-paneliami&quot;&gt;Переключение между панелями&lt;&#x2F;h4&gt;
&lt;p&gt;На верхнее: &lt;code&gt;prefix, up&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;На нижнее: &lt;code&gt;prefix, down&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;На то что слева: &lt;code&gt;prefix, left&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;На то что справа: &lt;code&gt;prefix, right&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;izmenenie-razmerov-tekushchei-paneli&quot;&gt;Изменение размеров текущей панели&lt;&#x2F;h4&gt;
&lt;p&gt;Комбинация: &lt;code&gt;prefix, ctrl + up\down&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pomeniat-paneli-mestami&quot;&gt;Поменять панели местами&lt;&#x2F;h4&gt;
&lt;p&gt;Комбинация: &lt;code&gt;prefix, {&lt;&#x2F;code&gt; или &lt;code&gt;prefix, }&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;perekliuchenie-mezhdu-klientami&quot;&gt;Переключение между клиентами&lt;&#x2F;h3&gt;
&lt;p&gt;Комбинации: &lt;code&gt;prefix, (&lt;&#x2F;code&gt; и &lt;code&gt;prefix, )&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;spravka-po-komandam&quot;&gt;Справка по командам&lt;&#x2F;h4&gt;
&lt;p&gt;Комбинация: &lt;code&gt;prefix, ?&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;konfigurirovanie-tmux&quot;&gt;Конфигурирование tmux&lt;&#x2F;h2&gt;
&lt;p&gt;Согласно &lt;code&gt;man tmux&lt;&#x2F;code&gt;, tmux загружает настройки из &lt;code&gt;&#x2F;etc&#x2F;tmux.conf&lt;&#x2F;code&gt;, а затем смотрит файл в домашней 
директории текущего пользователя &lt;code&gt;~&#x2F;.tmux.conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;После изменений в файлах конфигурации необходимо перечитать настройки:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;tmux source-file &#x2F;etc&#x2F;tmux.conf
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kak-pomeniat-kombinatsiiu-prefiksa&quot;&gt;Как поменять комбинацию префикса&lt;&#x2F;h3&gt;
&lt;p&gt;Кому-то может быть неудобной комбинация &lt;code&gt;Ctrl + b&lt;&#x2F;code&gt;, поэтому её можно поменять. Например, на &lt;code&gt;Ctrl + a&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kak-pomeniat-kombinatsiiu-dlia-razdeleniia-ekrana&quot;&gt;Как поменять комбинацию для разделения экрана&lt;&#x2F;h3&gt;
&lt;p&gt;По умолчанию, разделение экрана по горизонтали &lt;code&gt;prefix, &amp;quot;&lt;&#x2F;code&gt;, по вертикали - &lt;code&gt;prefix, %&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Это не совсем интуитивные клавиши, проще использовать клавиши: &lt;code&gt;-&lt;&#x2F;code&gt; и &lt;code&gt;|&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Как поменять комбинации:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;bind | split-window -h
bind - split-window -v
unbind &#x27;&quot;&#x27;
unbind %
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;perekliuchat-sia-mezhdu-paneliami-bez-prefiksa&quot;&gt;Переключаться между панелями без префикса&lt;&#x2F;h3&gt;
&lt;p&gt;Переключение между панелями одна из самых частых операций в tmux. Переключаться с использованием префикса неудобно.
Удобней использовать &lt;code&gt;Alt + стрелка&lt;&#x2F;code&gt;. Как это настроить:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как настроить chroot для sftp в CentOS 7</title>
		<published>2020-10-12T00:00:00+00:00</published>
		<updated>2020-10-12T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/sftp-chroot-centos7/" type="text/html"/>
		<id>https://b.tinyops.ru/sftp-chroot-centos7/</id>
		<content type="html">&lt;p&gt;В современных дистрибутивах Linux очень легко дать доступ пользователю через SFTP. 
Для этого достаточно создать пользователя и запустить службу &lt;code&gt;sshd&lt;&#x2F;code&gt;. По умолчанию пользователь сможет перемещаться 
по всем каталогам операционной системы к которым имеет доступ на чтение. Это очень плохо с точки зрения безопасности.&lt;&#x2F;p&gt;
&lt;p&gt;К счастью, &lt;code&gt;sshd&lt;&#x2F;code&gt; позволяет указать корневой каталог для пользователя (механизм chroot).&lt;&#x2F;p&gt;
&lt;p&gt;Дальнейшая настройка будет актуальна для CentOS 7 и OpenSSH 7.4, но скорей всего сработает и для других версий.&lt;&#x2F;p&gt;
&lt;p&gt;В качестве корневого каталога будет путь &lt;code&gt;&#x2F;sftp&#x2F;bob&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nastraivaem-sluzhbu-sshd&quot;&gt;Настраиваем службу sshd&lt;&#x2F;h3&gt;
&lt;p&gt;Добавляем в конец конфигурационного файла sshd &lt;code&gt;&#x2F;etc&#x2F;ssh&#x2F;sshd_config&lt;&#x2F;code&gt; следующий текст (комментарии можно не добавлять):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Match User bob
 # Запрещаем 
 X11Forwarding no
 # Запрещаем проксирование tcp-трафика
 AllowTcpForwarding no
 # Мы будем использовать только подсистему sftp
 ForceCommand internal-sftp
 # Корневой каталог для пользователя
 ChrootDirectory &#x2F;sftp&#x2F;bob
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Проверяем что конфигурация без ошибок:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;sshd -t
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если ошибок нет, то ответа от команды не последует. Затем рестартуем службу:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;systemctl restart sshd
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ustanavlivaem-korrektnye-prava&quot;&gt;Устанавливаем корректные права&lt;&#x2F;h3&gt;
&lt;p&gt;У механизма chroot есть требование для владельцев по пути к корневому каталогу:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ChrootDirectory&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Specifies the pathname of a directory to chroot(2) to after authentication. All components of the pathname must 
be root-owned directories that are not writable by any other user or group. After the chroot, sshd(8) 
changes the working directory to the user&#x27;s home directory.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Владельцем на пути до корневого каталога (включительно) должен быть &lt;code&gt;root&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому делаем так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;chown -R root: &#x2F;vfs
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если с правами что-то не так то в файле &lt;code&gt;&#x2F;var&#x2F;log&#x2F;secure&lt;&#x2F;code&gt; будет ошибка &lt;code&gt;fatal: bad ownership or modes for chroot directory&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testiruem&quot;&gt;Тестируем&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;$ sftp bob@your-server

Connected to your-server.
sftp&gt; ls
lost+found  test
sftp&gt; pwd
Remote working directory: &#x2F;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Всё работает.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как собрать старый Golang-проект с определённой версией зависимости</title>
		<published>2020-09-30T00:00:00+00:00</published>
		<updated>2020-09-30T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/how-to-build-golang-with-dep-version/" type="text/html"/>
		<id>https://b.tinyops.ru/how-to-build-golang-with-dep-version/</id>
		<content type="html">&lt;p&gt;Возникла задача дописать фичу для утилиты написанной на Go 1.7. Одно из требований к утилите было то что она должна была
работать под Windows Server 2008 (без R2). К сожалению, более новые версии Go, в том числе те, в которые завезли модули,
использовать было нельзя. В отличие от Rust в Go старых версий с зависимостями всё было сделано плохо.&lt;&#x2F;p&gt;
&lt;p&gt;Нельзя было как в Rust просто указать какую версию зависимости ты хочешь. Поэтому в этой статье опишу как максимально 
просто решить эту проблему.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, для проекта была нужна библиотека &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cavaliercoder&#x2F;grab&quot;&gt;grab&lt;&#x2F;a&gt;. 
С последнего мартовского коммита в проект &lt;code&gt;master&lt;&#x2F;code&gt; этой библиотеки само собой убежал и попутно поломал совместимость.
Проект перестал собираться.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы подсунуть необходимую версию нужно в &lt;code&gt;%GOPATH%&#x2F;src&#x2F;github.com&#x2F;cavaliercoder&lt;&#x2F;code&gt; 
клонировать стабильную версию с нужным тэгом. В данном случае нужен был &lt;code&gt;2.0.0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Удаляем каталог &lt;code&gt;grab&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Клонируем с тэгом 2.0.0:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;git clone --depth 1 --branch v2.0.0 https:&#x2F;&#x2F;github.com&#x2F;cavaliercoder&#x2F;grab.git
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;В Idea может потребоваться реиндексация, чтобы она обновила свои кэши по зависимостям: &lt;code&gt;File &amp;gt; Invalidate caches&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Готово.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как настроить резервное копирование файлов в Linux с помощью Borg Backup</title>
		<published>2020-06-16T00:00:00+00:00</published>
		<updated>2021-03-29T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/linux-backup-with-borg/" type="text/html"/>
		<id>https://b.tinyops.ru/linux-backup-with-borg/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.borgbackup.org&#x2F;&quot;&gt;BorgBackup&lt;&#x2F;a&gt; — это приложение для резервного копирования файлов 
с поддержкой &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%94%D0%B5%D0%B4%D1%83%D0%BF%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;дедупликации&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;osnovnye-vozmozhnosti&quot;&gt;Основные возможности&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Эффективное хранение&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Каждый файл разбивается на порции (chunks) и добавляется в репозиторий резервных копий если его там ещё не присутствовало.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Скорость работы&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Приложение написано на Python, но критические участки реализованы на C&#x2F;Python. 
Используется кэширование и индексирование данных.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Поддержка сжатия&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Поддерживаются четыре вида сжатия данных: lz4, zstd, zlib и lzma.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Поддержка шифрования&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Данные можно зашифровать с помощью 256-битного AES, целостность данных проверяется с помощью HMAC-SHA256.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;linux&#x2F;borg&#x2F;borg-site.png&quot; alt=&quot;alt text&quot; title=&quot;Документация к Borg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ustanovka&quot;&gt;Установка&lt;&#x2F;h3&gt;
&lt;p&gt;Авторы Borg позаботились о своих пользователях, поэтому он доступен под все популярные Linux\Unix платформы.&lt;&#x2F;p&gt;
&lt;p&gt;Для CentOS 7 приложение доступно в &lt;a href=&quot;https:&#x2F;&#x2F;fedoraproject.org&#x2F;wiki&#x2F;EPEL&quot;&gt;EPEL&lt;&#x2F;a&gt; репозитарии:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;yum -y install epel-release
yum -y install borgbackup
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nastroika-arkhivirovaniia&quot;&gt;Настройка архивирования&lt;&#x2F;h3&gt;
&lt;p&gt;В качестве примера настроим резервное копирование для сайта &lt;a href=&quot;https:&#x2F;&#x2F;cronbox.ru&quot;&gt;cronbox.ru&lt;&#x2F;a&gt;.
Файлы сайта расположены в каталоге &lt;code&gt;&#x2F;var&#x2F;www&#x2F;cronbox.ru&#x2F;html&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Borg использует понятие репозитория — это хранилище резервных копий. Создадим для нашего сайта отдельный репозиторий, 
без шифрования данных:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;borg init --encryption=none  &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Смотрим информацию по репозиторию:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;[root@server ~]# borg info &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru
Repository ID: df114c32702740844c3f05b38e0192d68af0670e4a1a381214394186fd1537eb
Location: &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru
Encrypted: No
Cache: &#x2F;root&#x2F;.cache&#x2F;borg&#x2F;df114c32702740844c3f05b38e0192d68af0670e4a1a381214394186fd1537eb
Security dir: &#x2F;root&#x2F;.config&#x2F;borg&#x2F;security&#x2F;df114c32702740844c3f05b38e0192d68af0670e4a1a381214394186fd1537eb
------------------------------------------------------------------------------
                       Original size      Compressed size    Deduplicated size
All archives:                    0 B                  0 B                  0 B

                       Unique chunks         Total chunks
Chunk index:                       0                    0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Видим что пока пусто. Сделаем первую резервную копию:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;borg create &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru::site &#x2F;var&#x2F;www&#x2F;cronbox.ru&#x2F;html
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Внутри каждого репозитария может храниться множество архивов. Например, мы можем отдельно архивировать папку uploads для сайта.
Поэтому в команде мы указали имя архива — &lt;code&gt;site&lt;&#x2F;code&gt;. Для отдельного архивирования uploads можно было указать вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;borg create &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru::uploads &#x2F;var&#x2F;www&#x2F;cronbox.ru&#x2F;html&#x2F;uploads
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;После создания копия смотрим изменения в репозитории:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;borg list &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru&#x2F;site
site-2020-06-16T03:25:02 Tue, 2020-06-16 03:25:03 [f0ebe8acf744ea65b2f340657fe6c251d86620284aad008b55afc7dd2a65a7c3]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Видим что появилась резервная копия. Теперь можем посмотреть общую информацию о репозитории:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;[root@server backups-sites]# borg info &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru
Repository ID: df114c32702740844c3f05b38e0192d68af0670e4a1a381214394186fd1537eb
Location: &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru
Encrypted: No
Cache: &#x2F;root&#x2F;.cache&#x2F;borg&#x2F;df114c32702740844c3f05b38e0192d68af0670e4a1a381214394186fd1537eb
Security dir: &#x2F;root&#x2F;.config&#x2F;borg&#x2F;security&#x2F;df114c32702740844c3f05b38e0192d68af0670e4a1a381214394186fd1537eb
------------------------------------------------------------------------------
                       Original size      Compressed size    Deduplicated size
All archives:              644.93 kB            277.42 kB            277.42 kB

                       Unique chunks         Total chunks
Chunk index:                     133                  133
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Как мы видим, общий объём данных (Original size) — 644КБ, хранится на диске (Deduplicated size) — 277КБ.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arkhivirovanie-po-raspisaniiu&quot;&gt;Архивирование по расписанию&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;[root@server]# crontab -e

0 1 * * * borg create &#x2F;mnt&#x2F;backups&#x2F;cronbox.ru::site &#x2F;var&#x2F;www&#x2F;cronbox.ru&#x2F;html
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Архив будет создаваться каждый день в час ночи. Для надёжности рекомендуется настроить &lt;a href=&quot;https:&#x2F;&#x2F;blog.cronbox.ru&#x2F;kak-monitorit-borg-backup&#x2F;&quot;&gt;мониторинг&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;poleznye-ssylki&quot;&gt;Полезные ссылки&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.borgbackup.org&quot;&gt;Официальный сайт&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;borgbackup.readthedocs.io&#x2F;en&#x2F;stable&#x2F;&quot;&gt;Документация&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cronbox.ru&#x2F;kak-monitorit-borg-backup&#x2F;&quot;&gt;Как настроить мониторинг для borg&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ошибка «Too many open files» в Linux</title>
		<published>2020-06-02T00:00:00+00:00</published>
		<updated>2020-06-02T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/too-many-open-files/" type="text/html"/>
		<id>https://b.tinyops.ru/too-many-open-files/</id>
		<content type="html">&lt;p&gt;Ошибка «Too many open files» означает, что процесс исчерпал доступные для него ресурсы по максимальному количеству
открытых файлов. Простыми словами — процессу было разрешено открыть максимум 100 файлов, а он попытался открыть 101-й.&lt;&#x2F;p&gt;
&lt;p&gt;Далее — разберёмся как работает это ограничение в операционных системах Linux. Все пути будут указаны для CentOS\RHEL-образных систем.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ogranicheniia-iadra-linux&quot;&gt;Ограничения ядра Linux&lt;&#x2F;h2&gt;
&lt;p&gt;Прежде всего ограничение на количество открытых файлов устанавливает ядро операционной системы. Посмотреть его можно
вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;[root@dracula ~]# sysctl fs.file-max
fs.file-max = 3000000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Это суммарное значение на всю операционную систему. Чтобы посмотреть сколько сейчас открыто файлов достаточно 
прочитать файл &lt;code&gt;&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-nr&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;$ cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-nr
1154    133     3000000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1154&lt;&#x2F;code&gt; — текущее значение открытых файлов.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;133&lt;&#x2F;code&gt; — сколько из открытых файлов не используются.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;3000000&lt;&#x2F;code&gt; — сколько разрешено открывать файлов.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pam&quot;&gt;PAM&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.linux-pam.org&#x2F;Linux-PAM-html&#x2F;sag-introduction.html&quot;&gt;PAM&lt;&#x2F;a&gt; (Pluggable Authentication Modules for Linux) — 
это набор динамически-подключаемых библиотек для аутентификации пользователей.&lt;&#x2F;p&gt;
&lt;p&gt;Конфигурация для PAM хранится в следующих каталогах и файлах:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;etc&#x2F;security&#x2F;limits.conf&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;etc&#x2F;security&#x2F;limits.d&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;etc&#x2F;pam.d&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Формат записи такой:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;nginx           soft   nofile 50000
nginx           hard   nofile 50000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Существует два вида ограничений: &lt;code&gt;soft&lt;&#x2F;code&gt; (мягкий) и &lt;code&gt;hard&lt;&#x2F;code&gt; (жесткий). Soft-ограничения носят рекомендательный характер, 
в отличие от hard-ограничений. Процесс пользователя который превысил допустимое количество открытых файлов (&lt;code&gt;nofile&lt;&#x2F;code&gt;) по hard-ограничению
не сможет открывать новые файлы, до тех пор пока не закроет как минимум один из ранее открытых.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;protsess-iadro-i-pam&quot;&gt;Процесс, ядро и PAM&lt;&#x2F;h2&gt;
&lt;p&gt;Все что описано выше показано на схеме:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;linux&#x2F;too-many-open-files.png&quot; alt=&quot;alt text&quot; title=&quot;Ядро, PAM и процесс&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Стартует процесс, при каждой попытке открыть файл ядро операционной системы проверяет не исчерпан ли общий лимит. 
Далее — если процесс поддерживает PAM, делается вызов через библиотеку, не исчерпались ли лимиты.&lt;&#x2F;p&gt;
&lt;p&gt;Если процесс не поддерживает PAM, какие бы лимиты ему не установили в конфигурационных файлах, он будет их игнорировать.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;oshibka-too-many-open-files&quot;&gt;Ошибка «Too many open files»&lt;&#x2F;h2&gt;
&lt;p&gt;Например, мы получили такую ошибку для &lt;code&gt;nginx&lt;&#x2F;code&gt;. Nginx поддерживает PAM, поэтому на него влияют настройки 
в &lt;code&gt;&#x2F;etc&#x2F;security&#x2F;limits.conf&lt;&#x2F;code&gt; и упомянутых выше файлах.&lt;&#x2F;p&gt;
&lt;p&gt;Смотрим сколько пользователю &lt;code&gt;nginx&lt;&#x2F;code&gt; разрешено:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;$ sudo -u nginx bash -c &#x27;ulimit -n&#x27;

1024
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Видимо что всего лишь &lt;code&gt;1024&lt;&#x2F;code&gt;, для нагруженного сервера это может быть недостаточным. Добавляем в &lt;code&gt;&#x2F;etc&#x2F;security&#x2F;limits.conf&lt;&#x2F;code&gt; строчки:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;nginx           soft   nofile 10000
nginx           hard   nofile 10000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Тем самым разрешая лимит до 10000 файлов.&lt;&#x2F;p&gt;
&lt;p&gt;В старых ядрах Linux значение &lt;code&gt;fs.file-max&lt;&#x2F;code&gt; может быть равно 10000. Если требуется дать &lt;code&gt;nginx&lt;&#x2F;code&gt; больше 10000 файлов, 
то необходимо добавить в &lt;code&gt;&#x2F;etc&#x2F;sysctl.conf&lt;&#x2F;code&gt; значение с запасом:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;fs.file-max = 100000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Операционная система перечитает пераметр при следующей загрузке. Чтобы не ждать ближайшей перезагрузки и 
применить его «на лету», делаем вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;$ sysctl -w fs.file-max=100000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;В отличие от первого способа, эта настройка будет актуальна до первой перезагрузки операционной системы.&lt;&#x2F;p&gt;
&lt;p&gt;После изменения настроек в конфигурации ядра и PAM необходимо перезапустить процесс &lt;code&gt;nginx&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poleznye-ssylki&quot;&gt;Полезные ссылки&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;sysctl&#x2F;fs.txt&quot;&gt;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;sysctl&#x2F;fs.txt&lt;&#x2F;a&gt; - описание параметров ядра.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;how-to-fix-su-cannot-open-session&#x2F;&quot;&gt;Статья про то как исправить ошибку «su: cannot open session: Permission denied»&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как исправить ошибку su: cannot open session: Permission denied для CentOS 7</title>
		<published>2020-05-22T00:00:00+00:00</published>
		<updated>2020-05-22T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/how-to-fix-su-cannot-open-session/" type="text/html"/>
		<id>https://b.tinyops.ru/how-to-fix-su-cannot-open-session/</id>
		<content type="html">&lt;p&gt;При попытке войти из &lt;code&gt;root&lt;&#x2F;code&gt; под пользователем &lt;code&gt;zero&lt;&#x2F;code&gt; получаем ошибку:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;[root@hercules]# su - zero
Last login: Thu May 21 12:24:16 MSK 2020 on pts&#x2F;0
su: cannot open session: Permission denied
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;При этом если попытаться запустить какую-нибудь команду &lt;code&gt;id&lt;&#x2F;code&gt; через &lt;code&gt;sudo&lt;&#x2F;code&gt; от имени &lt;code&gt;zero&lt;&#x2F;code&gt; получаем уже другую ошибку:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;[root@hercules]# sudo -u zero id
sudo: pam_open_session: Permission denied
sudo: policy plugin failed session initialization
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Проверяем не заблокирован ли пользователь:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;[root@hercules]# passwd -S zero
zero PS 2019-09-12 0 99999 7 -1 (Password set, SHA512 crypt.)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Все окей. Проверяем не истёк ли пароль:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;[root@hercules]# chage -l zero
Last password change                                    : Sep 12, 2019
Password expires                                        : never
Password inactive                                       : never
Account expires                                         : never
Minimum number of days between password change          : 0
Maximum number of days between password change          : 99999
Number of days of warning before password expires       : 7
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Здесь тоже все в порядке, пароль не истёк. Смотрим лог аутентификации &lt;code&gt;&#x2F;var&#x2F;log&#x2F;secure&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;[root@hercules]# tail &#x2F;var&#x2F;log&#x2F;secure
May 21 15:22:46 hercules sudo: root : TTY=pts&#x2F;0 ; PWD=&#x2F;root ; USER=zero ; COMMAND=&#x2F;bin&#x2F;id
May 21 15:22:46 hercules sudo: pam_limits(sudo:session): Could not set limit for &#x27;nofile&#x27;: Operation not permitted
May 21 15:22:46 hercules sudo: root : pam_open_session: Permission denied ; TTY=pts&#x2F;0 ; PWD=&#x2F;root ; USER=zero ; COMMAND=&#x2F;bin&#x2F;id
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Видим что есть проблема с настройкой &lt;code&gt;nofile&lt;&#x2F;code&gt; для модуля &lt;code&gt;pam_limits&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Смотрим конфиг &lt;code&gt;&#x2F;etc&#x2F;security&#x2F;limits.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
zero         soft   nofile 1500000
zero         hard   nofile 1500000
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Для пользователя &lt;code&gt;zero&lt;&#x2F;code&gt; установлен лимит на максимально количество открытых файлов — &lt;code&gt;1500000&lt;&#x2F;code&gt;. Допустимый диапазон 
значений для &lt;code&gt;nofile&lt;&#x2F;code&gt;: &lt;code&gt;1-1048576&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Меняем на любое число из разрешенного диапазона, сохраняем изменения в файле и &lt;code&gt;su&lt;&#x2F;code&gt; начинает работать.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;[root@hercules ~]# su - zero
Last login: Thu May 21 15:29:14 MSK 2020 on pts&#x2F;0
[zero@hercules ~]$
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;poleznye-ssylki&quot;&gt;Полезные ссылки&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;too-many-open-files&#x2F;&quot;&gt;Подробная статья про ошибку «Too many open files» в Linux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как обновить Zabbix сервер до 5-й версии для CentOS 7</title>
		<published>2020-05-18T00:00:00+00:00</published>
		<updated>2020-05-18T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/how-to-upgrade-from-zabbix-4-to-zabbix-5/" type="text/html"/>
		<id>https://b.tinyops.ru/how-to-upgrade-from-zabbix-4-to-zabbix-5/</id>
		<content type="html">&lt;p&gt;На днях вышла новая мажорная версия Zabbix сервера. На Opennet в комментариях к новости развернулся холивар, какой
мониторинг лучше. Для своих задач я предпочитаю Zabbix, поэтому будем обновлять именно его.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;vazhnye-izmeneniia-mezhdu-versiiami&quot;&gt;Важные изменения между версиями&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Web-интерфейс требует PHP 7.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Zabbix Proxy больше не поддерживает CentOS 6.&lt;br &#x2F;&gt;
В официальном &lt;a href=&quot;http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;6&#x2F;x86_64&#x2F;&quot;&gt;репозитории&lt;&#x2F;a&gt; нет пакетов для его установки. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;tekhnicheskie-parametry-servera&quot;&gt;Технические параметры сервера&lt;&#x2F;h4&gt;
&lt;p&gt;Информация о сервере, который мы будем обновлять:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ОС - CentOS 7.x.&lt;&#x2F;li&gt;
&lt;li&gt;PHP 5.6.&lt;&#x2F;li&gt;
&lt;li&gt;MariaDB 10&lt;&#x2F;li&gt;
&lt;li&gt;Web-сервер - Nginx.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;plan-obnovleniia&quot;&gt;План обновления&lt;&#x2F;h4&gt;
&lt;p&gt;Краткий план этапов, которые мы пройдем в процессе обновления:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Создаем резервные копии.&lt;&#x2F;li&gt;
&lt;li&gt;Обновляем PHP с 5.6 до 7.2.&lt;&#x2F;li&gt;
&lt;li&gt;Обновляем Zabbix сервер.&lt;&#x2F;li&gt;
&lt;li&gt;Обновляем Zabbix Frontend.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;1-sozdaem-rezervnye-kopii&quot;&gt;1. Создаем резервные копии&lt;&#x2F;h4&gt;
&lt;p&gt;Перед любым обновлением приложения следует сделать резервную копию текущей версии. 
К счастью, для Zabbix это просто, т. к. архивировать нужно только базу и файлы интерфейса.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Резервная копия базы&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Снимаем дамп базы:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;mysqldump zabbix_server | gzip &gt; zabbix_server.sql.gz
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Резервная копия Zabbix Frontend&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;На текущем сервере frontend расположен в &lt;code&gt;&#x2F;var&#x2F;www&#x2F;zabbix&#x2F;html&lt;&#x2F;code&gt;, поэтому копируем эту папку куда-нибудь.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2-obnovliaem-php-s-5-6-do-7-2&quot;&gt;2. Обновляем PHP с 5.6 до 7.2&lt;&#x2F;h4&gt;
&lt;p&gt;К сожалению, в мире RHEL-дистрибутивов одной командой PHP не обновить.&lt;&#x2F;p&gt;
&lt;p&gt;Версии пакетов в официальных репозиториях CentOS и в EPEL меняются очень неторопливо, поэтому приходится ходить на &amp;quot;сторону&amp;quot;.
Для CentOS 7 есть два неофициальных репозитория, из которых все берут новые версии PHP:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rpms.remirepo.net&#x2F;&quot;&gt;Remi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webtatic.com&#x2F;projects&#x2F;yum-repository&#x2F;&quot;&gt;Webtatic&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так как на моем сервере крутится только Zabbix, то список пакетов для обновления можно подсмотреть из установленных: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;yum list installed | grep php
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;В моем случае был уже подключен репозиторий Webtatic, поэтому ориентируемся на его наименование пакетов. 
Все пакеты с PHP 7.2 начинаются с префикса &lt;code&gt;php72w&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Берем список тех пакетов которые у нас установлены и копируем в текстовый редактор, затем меняем префикс на &lt;code&gt;php72w&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;yum install --enablerepo=webtatic php72w.x86_64 php72w-bcmath.x86_64 php72w-cli.x86_64 php72w-common.x86_64 \
php72w-devel.x86_64 php72w-embedded.x86_64 php72w-fpm.x86_64 php72w-gd.x86_64 php72w-ldap.x86_64 \ 
php72w-mbstring.x86_64 php72w-mcrypt.x86_64 php72w-mysqlnd.x86_64 php72w-opcache.x86_64 php72w-pdo.x86_64 \
php72w-pear.noarch php72w-pecl-apcu.x86_64 php72w-process.x86_64 php72w-xml.x86_64
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Часть пакетов yum не найдет, но это можно игнорировать. В качестве средства для запуска php 
мы будем использовать &lt;code&gt;php-fpm&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Настраиваем php-fpm&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Редактируем конфигурацию &lt;code&gt;&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Меняем пользователя с &lt;code&gt;apache&lt;&#x2F;code&gt; на &lt;code&gt;nginx&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Меняем тип подключения на файл:&lt;br &#x2F;&gt;
Было:&lt;pre&gt;&lt;code&gt;listen = 127.0.0.1:9000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
Стало:&lt;pre&gt;&lt;code&gt;listen = &#x2F;var&#x2F;run&#x2F;php5-fpm.sock
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Включаем автозапуск сервиса и стартуем:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;systemctl enable php-fpm &amp;&amp; systemctl start php-fpm
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;3-obnovliaem-zabbix-server&quot;&gt;3. Обновляем Zabbix сервер&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;service zabbix-server stop

yum localinstall http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm
yum upgrade zabbix-server-mysql zabbix-web-mysql zabbix-agent

chown -R zabbix: &#x2F;etc&#x2F;zabbix
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Очищаем содержимое &lt;code&gt;&#x2F;var&#x2F;www&#x2F;zabbix&#x2F;html&lt;&#x2F;code&gt;, затем копируем самый свежий 
frontend из &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;zabbix&lt;&#x2F;code&gt; в &lt;code&gt;&#x2F;var&#x2F;www&#x2F;zabbix&#x2F;html&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Смотрим лог сервера, там побегут строчки &lt;code&gt;database upgrade...&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Заходим в интерфейс &lt;code&gt;http:&#x2F;&#x2F;zabbix&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как починить ошибку Inaccessible VM в VirtualBox и Vagrant</title>
		<published>2020-05-10T00:00:00+00:00</published>
		<updated>2020-05-10T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/how-to-fix-error-inaccessible-vm/" type="text/html"/>
		<id>https://b.tinyops.ru/how-to-fix-error-inaccessible-vm/</id>
		<content type="html">&lt;p&gt;Я поймал эту проблему однажды когда поднимал виртуальную машину с помощью Vagrant:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your VM has become &amp;quot;inaccessible&amp;quot;. Unfortunately, this is a critical error with VirtualBox that Vagrant 
can not cleanly recover from. Please open VirtualBox and clear out your 
inaccessible virtual machines or find a way to fix them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Virtual Box маркирует виртуальную машину как &lt;code&gt;inaccessible&lt;&#x2F;code&gt; если не может её запустить и 
не может сформулировать пользователю в чем же дело.&lt;&#x2F;p&gt;
&lt;p&gt;Умники в интернетах конечно же предлагаю пересоздать машину с нуля, наподобие умников на форумах Microsoft. 
Вторые, при малейшем недомогании, обычно рекомендуют переустановить ОС :)&lt;&#x2F;p&gt;
&lt;p&gt;Для начала посмотрим список виртуальных машин:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ VBoxManage list vms

&quot;prometheus_default_1562491030033_47028&quot; {b8c2eec3-e3e2-4d7b-9ee4-9f09d7691a71}
&quot;bamboo-agent-centos7_default_1568705322865_68355&quot; {fcc600be-859a-430e-8da2-f3ff8dfa2d9f}
&quot;&lt;inaccessible&gt;&quot; {4fb4e265-61cb-4ce8-d3c4-de5f2daea7f8}
&quot;supervisor-jolokia_default_1572425247238_89749&quot; {ee47977e-11f2-47b4-a2af-756cfff524f2}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Запоминаем уникальный ID проблемной виртуальной машины - &lt;code&gt;4fb4e265-61cb-4ce8-d3c4-de5f2daea7f8&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Далее удаляем регистрацию виртуальной машины в недрах VirtualBox:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;VBoxManage unregistervm 4fb4e265-61cb-4ce8-d3c4-de5f2daea7f8
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;И снова регистрируем:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;VBoxManage registervm 4fb4e265-61cb-4ce8-d3c4-de5f2daea7f8
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Теперь можно поднять машину как и планировали первоначально:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant up
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chto-delat-esli-u-menia-neskol-ko-problemnykh-mashin&quot;&gt;Что делать если у меня несколько проблемных машин?&lt;&#x2F;h3&gt;
&lt;p&gt;Бывают ситуации когда машин со статусом &lt;code&gt;inaccessible&lt;&#x2F;code&gt; может быть более чем одна. Можно перерегистрировать все, либо
найти UUID для проблемной машины.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Решение для Vagrant:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Заходим в каталог с Vagrantfile и читаем UUID:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cat .vagrant&#x2F;machines&#x2F;default&#x2F;virtualbox&#x2F;id

4fb4e265-61cb-4ce8-d3c4-de5f2daea7f8
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;На этом все.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Настройка Nginx для проксирования Web-сокетов</title>
		<published>2020-04-09T00:00:00+00:00</published>
		<updated>2020-04-09T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/nginx-websocket-proxy/" type="text/html"/>
		<id>https://b.tinyops.ru/nginx-websocket-proxy/</id>
		<content type="html">&lt;p&gt;Nginx легко настроить для проксирования Web-сокетов, эта функциональность поддерживается с версии 1.3. Для переключения
HTTP запросов в Web-сокеты используется 
механизм &lt;a href=&quot;https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc2616#section-14.42&quot;&gt;смены протокола&lt;&#x2F;a&gt; доступный в HTTP&#x2F;1.1. 
Передаются два заголовка: Connection и Upgrade.&lt;&#x2F;p&gt;
&lt;p&gt;Например, ваше приложение слушает tcp-порт &lt;code&gt;12345&lt;&#x2F;code&gt; и поддерживает Web-сокеты, вот как это настраивается:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;location &#x2F; {
    proxy_pass http:&#x2F;&#x2F;localhost:12345;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection &quot;upgrade&quot;;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kogda-obryvaet-web-sokety&quot;&gt;Когда обрывает Web-сокеты&lt;&#x2F;h3&gt;
&lt;p&gt;Как-то раз на production сервере мы поймали проблему - Web-сокеты обрывались каждые 2 минуты. 
По умолчанию nginx закрывает проксируемые соединения после 60 секунд неактивности. Эта величина регулируется параметром
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;http&#x2F;ngx_http_proxy_module.html#proxy_read_timeout&quot;&gt;proxy_read_timeout&lt;&#x2F;a&gt;. На нашем сервере
был настроен &lt;code&gt;proxy_read_timeout&lt;&#x2F;code&gt; равный как раз двум минутам.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому чтобы Web-сокеты не обрывало приложение должно уметь отправлять условные ping-запросы.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ofitsial-naia-dokumentatsiia&quot;&gt;Официальная документация&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;http&#x2F;websocket.html&quot;&gt;Проксирование WebSocket&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как развернуть php приложение в Docker</title>
		<published>2020-04-04T00:00:00+00:00</published>
		<updated>2020-04-04T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/run-php-in-docker/" type="text/html"/>
		<id>https://b.tinyops.ru/run-php-in-docker/</id>
		<content type="html">&lt;p&gt;По ходу работы мне потребовалось мигрировать тройку php-приложений на новый сервер. На старом сервере был CentOS 6, зоопарк софта и набор
недокументированных хаков. Т.к. я из мира JVM-языков, то мир php для меня чужой. 
Чтобы минимизировать себе психологический урон в будущем, я решил собрать docker образ для каждого из приложений. &lt;&#x2F;p&gt;
&lt;p&gt;Такое оборачивание дает дополнительное преимущество - если кто-то хакнул приложение, 
то можно без привлечения внешних security-средств (например, tripwire) легко сдампить текущее состояние в файл, откатить
до нехакнутого варианта. А дальше уже звать разработчиков и пусть роются в дампе :))&lt;&#x2F;p&gt;
&lt;p&gt;За основу я взял образ с php 5.6 + Apache. Приложения требовали &lt;code&gt;ImageMagick&lt;&#x2F;code&gt;, &lt;code&gt;gd&lt;&#x2F;code&gt; и &lt;code&gt;zip&lt;&#x2F;code&gt;, 
поэтому добавил их через скрипт &lt;code&gt;docker-php-ext-install&lt;&#x2F;code&gt;. Также требовалось установить
часовой пояс сервера, сделал это классическим &lt;code&gt;echo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Перед сборкой скопировал файлы приложения в подкаталог &lt;code&gt;app&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Файл сценария сборки - &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;FROM php:5.6-apache

RUN apt-get update &amp;&amp; apt-get install -y \
                      libmagickwand-dev --no-install-recommends \
                   &amp;&amp; pecl install imagick \
        &amp;&amp; docker-php-ext-enable imagick

RUN apt-get update &amp;&amp; apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libpng-dev \
    &amp;&amp; docker-php-ext-configure gd --with-freetype --with-jpeg \
    &amp;&amp; docker-php-ext-install -j$(nproc) gd \
    &amp;&amp; docker-php-ext-install -j$(nproc) zip

RUN echo &quot;date.timezone = Europe&#x2F;Moscow&quot; &gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;timezone.ini

RUN a2enmod rewrite
RUN service apache2 restart
COPY app&#x2F; &#x2F;var&#x2F;www&#x2F;html

RUN usermod -u 1001 www-data &amp;&amp; groupmod -g 1001 www-data

RUN chown -R www-data.www-data &#x2F;var&#x2F;www
RUN chmod -R ug=rwx &#x2F;var&#x2F;www

RUN mkdir &#x2F;tmp&#x2F;webmodule
RUN chmod a=rwx &#x2F;tmp&#x2F;webmodule
EXPOSE 80

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Собираем:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;docker build -t my-repo&#x2F;my-app:1.0.0 .
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kak-dobavliat-rasshireniia-dlia-php&quot;&gt;Как добавлять расширения для php&lt;&#x2F;h2&gt;
&lt;p&gt;Авторы PHP любезно предоставили скрипт &lt;code&gt;docker-php-ext-install&lt;&#x2F;code&gt; внутри базового контейнера. В примере выше видно как это
использовать.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-ispol-zovat-svoi-php-ini&quot;&gt;Как использовать свой php.ini&lt;&#x2F;h2&gt;
&lt;p&gt;Добавляем в &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;COPY php.ini &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kak-reshit-problemu-s-pravami-dostupa&quot;&gt;Как решить проблему с правами доступа&lt;&#x2F;h2&gt;
&lt;p&gt;В &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; есть пара команд, которые дают полные права для пользователя &lt;code&gt;www-data&lt;&#x2F;code&gt;, 
а также задают ID пользователя и группы для него равные &lt;code&gt;1001&lt;&#x2F;code&gt;.
На хосте где крутится докер я создал юзера с таким же uid\gid и сделал его полноправным владельцем папки 
которую использую как volume:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;...
volumes:
      - .&#x2F;storage:&#x2F;var&#x2F;www&#x2F;html&#x2F;data
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kak-ispol-zovat&quot;&gt;Как использовать&lt;&#x2F;h2&gt;
&lt;p&gt;С помощью docker compose можно завести вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;version: &#x27;2&#x27;

services:
  phpfpm:
    image: &quot;my-repo&#x2F;my-app:1.0.0&quot;
    volumes:
      - .&#x2F;storage:&#x2F;var&#x2F;www&#x2F;html&#x2F;data
    ports:
      - &quot;9123:80&quot;
    environment:
      - APACHE_RUN_USER=#1001
      - APACHE_RUN_GROUP=#1001
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Чтобы данные которые загружают юзеры сохранялись делаем volume.&lt;&#x2F;p&gt;
&lt;p&gt;Стартуем:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;docker-compose up -d
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Приложение будет доступно на порту &lt;code&gt;9123&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Утилита для быстрого поиска файлов Everything</title>
		<published>2020-03-24T00:00:00+00:00</published>
		<updated>2020-03-24T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/everything/" type="text/html"/>
		<id>https://b.tinyops.ru/everything/</id>
		<content type="html">&lt;p&gt;Продолжаю рубрику &lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&quot;&gt;Awesomeware&lt;&#x2F;a&gt;, про качественное программное обеспечение, которое заслуживает внимания.
В прошлый раз была &lt;a href=&quot;&#x2F;yandex-screenshot-tool&#x2F;&quot;&gt;утилита для скриншотов от Яндекс&lt;&#x2F;a&gt;, а сегодня - рассказ про &lt;a href=&quot;https:&#x2F;&#x2F;www.voidtools.com&#x2F;ru-ru&#x2F;&quot;&gt;Everything&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything – это поисковая программа для Windows, мгновенно отыскивающая файлы и папки по их именам.
В отличие от встроенной в Windows поисковой системы, Everything изначально показывает каждый файл и папку в компьютере (отсюда и название &amp;quot;Everything&amp;quot;, т.е. &amp;quot;все&amp;quot;).
Вы вводите поисковый фильтр, после чего отображаются только нужные вам файлы и папки.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;everything-1.png&quot; alt=&quot;alt text&quot; title=&quot;Как выглядит главное окно программы&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Автор любезно предоставил &lt;a href=&quot;https:&#x2F;&#x2F;www.voidtools.com&#x2F;ru-ru&#x2F;faq&#x2F;#%D0%A7%D1%82%D0%BE_%D1%82%D0%B0%D0%BA%D0%BE%D0%B5_everything&quot;&gt;исчерпывающий FAQ&lt;&#x2F;a&gt; по архитектуре, особенностях работы и решении популярных проблем. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;chem-polezna-utilita&quot;&gt;Чем полезна утилита&lt;&#x2F;h3&gt;
&lt;p&gt;Поиск по именам файлов.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kak-nastroit&quot;&gt;Как настроить&lt;&#x2F;h3&gt;
&lt;p&gt;Настройка для утилиты минимальна, она отлично работает с настройками по умолчанию. Я лишь добавил горячую клавишу
чтобы открывать и скрывать окно утилиты. &lt;&#x2F;p&gt;
&lt;p&gt;В настройках указал комбинацию горячих клавиш - &lt;code&gt;Ctrl+F3&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;everything-2.png&quot; alt=&quot;alt text&quot; title=&quot;Главная горячая комбинация&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;По первому нажатию окно утилиты появляется, по следующему - исчезает.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;otsenka-kachestva&quot;&gt;Оценка качества&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Удобство использования&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Интерфейс простой, отклик без видимых задержек.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Производительность&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Запуск - менее 1 секунды&lt;&#x2F;li&gt;
&lt;li&gt;Поиск 600.000+ файлов менее чем за 1 секунду&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;everything-3.gif&quot; alt=&quot;alt text&quot; title=&quot;Скорость поиска файлов&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Потребление ресурсов&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1,37МБ&lt;&#x2F;code&gt; на диске для исполняемого файла &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;1,2МБ&lt;&#x2F;code&gt; в оперативной памяти - исполняемый файл&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;176МБ&lt;&#x2F;code&gt; в оперативной памяти - хранение индекса&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nedostatki&quot;&gt;Недостатки&lt;&#x2F;h3&gt;
&lt;p&gt;В процессе написания статьи обнаружил недостаток. Приложение хранит свой поисковый индекс в оперативной памяти.
В моем случае для ранения 3,5 миллиона записей она использует &lt;code&gt;173МБ&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Много ли системных ресурсов требуется Everything?&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Нет, Everything потребляет очень мало системных ресурсов.
В свежеустановленной Windows 10 (около 120 тыс. файлов) будет занято порядка 14 МБ ОЗУ и менее 9 МБ на диске.
В системе с миллионом файлов будет занято примерно 75 МБ ОЗУ и 45 МБ на диске.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;gde-skachat&quot;&gt;Где скачать&lt;&#x2F;h3&gt;
&lt;p&gt;Everything абсолютно бесплатная утилита и доступна для скачивания на официальном сайте - 
&lt;a href=&quot;https:&#x2F;&#x2F;www.voidtools.com&#x2F;ru-ru&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.voidtools.com&#x2F;ru-ru&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drugie-posty-na-etu-temu&quot;&gt;Другие посты на эту тему&lt;&#x2F;h3&gt;
&lt;p&gt;Другие посты про удобный и быстрый софт вы можете посмотреть под тэгом &lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&quot;&gt;Awesomeware&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Утилита для скриншотов от Яндекс</title>
		<published>2020-02-09T00:00:00+00:00</published>
		<updated>2020-02-09T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/yandex-screenshot-tool/" type="text/html"/>
		<id>https://b.tinyops.ru/yandex-screenshot-tool/</id>
		<content type="html">&lt;p&gt;Этим постом я стартую рубрику про качественный софт (&lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&quot;&gt;Awesomeware&lt;&#x2F;a&gt;), 
приложения которые существенно помогают в повседневности, быстры и написаны для людей.&lt;&#x2F;p&gt;
&lt;p&gt;Есть прекрасная статья от Никиты Прокопова - &lt;a href=&quot;https:&#x2F;&#x2F;tonsky.me&#x2F;blog&#x2F;disenchantment&#x2F;ru&#x2F;&quot;&gt;Мое разочарование в софте&lt;&#x2F;a&gt;,
цитата оттуда:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Компьютеры стали бытовым прибором, начать программировать легче, чем когда-либо, сложнейшие вещи делаются просто и даже тривиально, написаны горы готового кода. К сожалению, у этого есть и обратная сторона — программы становятся большими, медленными, неуправляемыми, непонимаемыми.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;За годы практики у меня накопился набор надежных утилит, которые я использую каждый день. Будет круто если о них узнает
больше людей.&lt;&#x2F;p&gt;
&lt;p&gt;Для каждого приложения, о котором буду писать, введем критерии оценки:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Удобство для пользователя&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Не нужно быть IT-специалистом чтобы пользоваться приложением, если приложение расчитано на широкий круг пользователей.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Высокая производительность&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Время ожидания для запуска в пределах 1 секунды.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Размер исполняемого файла&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
В пределах 10МБ - отлично.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Первой будет утилита для создания скриншотов от Яндекса. Выглядит она вот так:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;yst-1.png&quot; alt=&quot;alt text&quot; title=&quot;Скриншот из утилиты&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chto-ponravilos&quot;&gt;Что понравилось&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Сделал скриншот - сохранил на Яндекс.Диск&lt;br &#x2F;&gt;
Он доступен на всех устройствах где ты используешь сервис. С другими утилитами ты получаешь ссылку.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Полный инструментарий для скриншотов:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Создать снимок всего экрана&lt;&#x2F;li&gt;
&lt;li&gt;Создать снимок активного окна&lt;&#x2F;li&gt;
&lt;li&gt;Создать снимок выбранной области&lt;&#x2F;li&gt;
&lt;li&gt;Расшарить скриншот в Интернет&lt;&#x2F;li&gt;
&lt;li&gt;Добавить текст&lt;&#x2F;li&gt;
&lt;li&gt;Добавить стрелки&lt;&#x2F;li&gt;
&lt;li&gt;Замазать чувствительные данные&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Скорость запуска и работы&lt;br &#x2F;&gt;
В пределах 1 секунды&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Настраиваемые горячие клавиши
Я настроил PrintScreen на снимок области&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Горячая клавиша &lt;code&gt;Ctrl+S&lt;&#x2F;code&gt; сохраняет скриншот на яндекс диск и закрывает окно утилиты&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Скриншот открывается в отдельном окне&lt;br &#x2F;&gt;
Вспоминаю как страдал когда пользовался Lightshot. Его особенность в том что инструменты добавлялись 
к той области скриншот которой ты хочешь сделать. Это создавало проблему со скриншотами у краев экрана. 
Часть инструментов LightShot пропадали за краями.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;nastroiki&quot;&gt;Настройки&lt;&#x2F;h2&gt;
&lt;p&gt;Настройки к утилите живут на отдельной вкладке настроек Яндекс.Диска. Настроек немного, но их более чем достаточно:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;awesomeware&#x2F;yst-2.png&quot; alt=&quot;alt text&quot; title=&quot;Вкладка настроек&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Я настроил для себя захват области на &lt;code&gt;PrintScreen&lt;&#x2F;code&gt;, остальное мне не нужно.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;otsenka-kachestva&quot;&gt;Оценка качества&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Удобство использования&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Интерфейс простой, но и не выглядит обрезанным. Набор дополнительных функций исчерпывающий, есть все функции необходимые
для работы со скриншотами&lt;&#x2F;li&gt;
&lt;li&gt;Полноценная поддержка горячих клавиш&lt;&#x2F;li&gt;
&lt;li&gt;Интеграция с Яндекс.Диском&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Производительность&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Запуск и снятие скриншота в пределах 1 секунды&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Потребление ресурсов&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;5МБ на диске&lt;br &#x2F;&gt;
Утилита поставляется вместе с Яндекс.Диском, в виде отдельного исполняемого файла&lt;&#x2F;li&gt;
&lt;li&gt;23,8МБ в оперативной памяти&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;drugie-posty-na-etu-temu&quot;&gt;Другие посты на эту тему&lt;&#x2F;h2&gt;
&lt;p&gt;Другие посты про удобный и быстрый софт вы можете посмотреть под тэгом &lt;a href=&quot;&#x2F;tags&#x2F;awesomeware&quot;&gt;Awesomeware&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как исправить глюки в консоли Windows 10 при подключении через SSH</title>
		<published>2020-02-07T00:00:00+00:00</published>
		<updated>2020-02-07T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/fix-console-glitches-windows-10/" type="text/html"/>
		<id>https://b.tinyops.ru/fix-console-glitches-windows-10/</id>
		<content type="html">&lt;p&gt;Несколько лет назад Microsoft взяли курс на дружбу с операционными системами на базе ядра Linux. 
Благодаря этому в Windows 10 появились крутые возможности:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Встроенный SSH клиент&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Возможность подключаться через SSH прямо из консоли Windows.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Windows Subsystem for Linux&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Возможность использовать софт под linux прямо из консоли Windows, пусть и с рядом ограничений.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;К сожалению, реализация OpenSSH клиента под Windows работает с ошибками. Одна из главный проблем это мигающий экран
в приложениях с псевдо-графикой. Из такого рода приложений я используют только классический Midnight Commander, поэтому
исправлять проблему будем прежде всего для него. Уверен что решение сработает и для остальных приложений. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;reshenie&quot;&gt;Решение&lt;&#x2F;h3&gt;
&lt;p&gt;Решение простое - использовать SSH клиент из пакета &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;download&#x2F;win&quot;&gt;Git for Windows&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Устанавливаем набор утилит &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;download&#x2F;win&quot;&gt;Git for Windows&lt;&#x2F;a&gt;, выбираем все субпакеты в процессе установки&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Добавляем в переменную окружения &lt;code&gt;PATH&lt;&#x2F;code&gt; путь &lt;code&gt;до ssh.exe&lt;&#x2F;code&gt; из пакета &lt;code&gt;Git for Windows&lt;&#x2F;code&gt;:&lt;br &#x2F;&gt;
Желательно добавить в начало значения переменной. Например, вот так:&lt;br &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;windows&#x2F;windows-ssh-glitches-path.png&quot; alt=&quot;alt text&quot; title=&quot;Переменные окружения&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Открываем Командную строку заново и пробуем использовать ssh клиент с запуском Midnight Commander&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;windows&#x2F;windows-ssh-glitches-mc.png&quot; alt=&quot;alt text&quot; title=&quot;Midnight Commander&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Все работает как надо :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pravil-nyi-kurs&quot;&gt;Правильный курс&lt;&#x2F;h3&gt;
&lt;p&gt;Несмотря на известные проблемы со встроенным клиентом SSH и Linux-подсистемой для Windows я искренне верю что
Microsoft выбрали верное направление. Десятки лет администраторы Windows серверов не имели современной командной строки,
с историей команд, поиском, подстановкой и справочной системой на подобие man. Руководство Microsoft не считало нужным
развивать это направление и делало ставку на графические интерфейсы, мол тыкать мышкой всегда понятней и удобней.
Мировой опыт работы с Linux\Unix-системами доказал что это не так. &lt;&#x2F;p&gt;
&lt;p&gt;Я верю что Сатья Наделла, действующий глава Microsoft, доведет интеграцию до уровня production ready.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как исправить ошибку - No tests found matching Method в IntelliJ IDEA</title>
		<published>2020-01-15T00:00:00+00:00</published>
		<updated>2020-01-15T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/how-to-fix-no-tests-found-matching-method-issue/" type="text/html"/>
		<id>https://b.tinyops.ru/how-to-fix-no-tests-found-matching-method-issue/</id>
		<content type="html">&lt;p&gt;Даже на момент написания статьи в связке JetBrains IDEA + Gradle хватает проблем с окривевшими кэшами. 
Причем текст ошибки никак не помогает понять в чем же проблема. Поэтому те кто давно работает 
со всея-IDE от JetBrains знают что скорей всего пришел момент проверки актуальности кэшей (инвалидации) Gradle, либо их очистки.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;oshibka-no-tests-found-matching-method&quot;&gt;Ошибка - No tests found matching Method&lt;&#x2F;h3&gt;
&lt;p&gt;Это исключение можно словить при запуске unit-тестов. Вы запускали тесты и вдруг стало писать эту ошибку.
Опытным путем удалось выявить, что ноги проблемы растут из относительно свежей Gradle фичи - &lt;a href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;build_cache.html&quot;&gt;Build cache&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gradle build cache - это механизм кэширования который нацелен на экономию времени, переиспользуя вывод от предыдущих сборок приложения.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Эта фича включается через файл конфигурации &lt;code&gt;gradle.properties&lt;&#x2F;code&gt;, вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;properties&quot; class=&quot;language-properties &quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;org.gradle.caching=true
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;На словах звучит круто и на деле сборки становятся быстрей, но проверка актуальности кэша (инвалидация) происходит далеко не всегда.
Чаще всего проблема проявляется после запуска анализа покрытия кода (coverage). Gradle создает каталог &lt;code&gt;out&lt;&#x2F;code&gt; и перестает
видеть изменения в тестах.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reshenie&quot;&gt;Решение&lt;&#x2F;h2&gt;
&lt;p&gt;Удалить каталоги &lt;code&gt;build&lt;&#x2F;code&gt; и &lt;code&gt;out&lt;&#x2F;code&gt; в корне проекта.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как решать проблемы с Zola</title>
		<published>2020-01-10T00:00:00+00:00</published>
		<updated>2020-01-10T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/zola-issues/" type="text/html"/>
		<id>https://b.tinyops.ru/zola-issues/</id>
		<content type="html">&lt;p&gt;Основные ошибки при генерации Zola выдает прямо в консоль. Например, вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;Change detected @ 2020-01-11 18:37:14
-&gt; Content changed C:\pro\tinyops-blog\content&#x2F;zola-issues.md
Failed to build the site
Error: Failed to render page &#x27;d:\tinyops-blog\content&#x2F;zola-issues.md&#x27;
Reason: Failed to render &#x27;tinyblog&#x2F;templates&#x2F;page.html&#x27;
Reason: Variable `page.taxonomies[&#x27;tags&#x27;]` not found in context while rendering &#x27;tinyblog&#x2F;templates&#x2F;page.html&#x27;: the evaluated version was `page.taxonomies.tags`. Maybe the index is out of bounds?
Done in 31ms.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;В контексте ошибки выше:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Ошибка связана с содержимым файла &lt;code&gt;zola-issues.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Движок не может отрендерить контент с шаблоном &lt;code&gt;page.html&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Переменная &lt;code&gt;page.taxonomies[&#x27;tags&#x27;]&lt;&#x2F;code&gt; не найдена&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Смотрим начало &lt;code&gt;content&#x2F;zola-issues.md&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;+++
title = &quot;Как решать проблемы с Zola&quot;
date = 2020-01-10
+++
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;и видим что секция &lt;code&gt;[taxonomies]&lt;&#x2F;code&gt; отсутствует. Если взялся использовать тэги и категории, то будь
добр их определить. Исправляем:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[taxonomies]
tags = [&quot;zola&quot;]
categories = [&quot;tutorial&quot;]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;oshibka-the-requested-port-is-not-available&quot;&gt;Ошибка - The requested port is not available&lt;&#x2F;h2&gt;
&lt;p&gt;Как это выглядит в консоли:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;d:\tinyops-blog&gt;zola serve
The requested port is not available
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ошибка сообщает что Zola не может стартануть с выбранным tcp-портом (по умолчанию &lt;code&gt;1111&lt;&#x2F;code&gt;). &lt;&#x2F;p&gt;
&lt;p&gt;Решения для Windows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Убить процесс &lt;code&gt;zola.exe&lt;&#x2F;code&gt;
В Windows после нажатия &lt;code&gt;CTRL+C&lt;&#x2F;code&gt; приложение продолжает работать.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Указать другой порт при запуске:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;zola serve --port 12345
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;drugie-stat-i-pro-zola&quot;&gt;Другие статьи про Zola&lt;&#x2F;h2&gt;
&lt;p&gt;По тэгу &lt;a href=&quot;&#x2F;tags&#x2F;zola&quot;&gt;zola&lt;&#x2F;a&gt; вы можете найти другие статьи из этого цикла.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как отобразить список тэгов в Zola</title>
		<published>2020-01-10T00:00:00+00:00</published>
		<updated>2020-01-10T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/zola-tags/" type="text/html"/>
		<id>https://b.tinyops.ru/zola-tags/</id>
		<content type="html">&lt;p&gt;В определенный момент мне захотелось чтобы на каждой странице отображался список тэгов,
так как это упрощает навигацию по контенту.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;zola&#x2F;zola-tags.png&quot; alt=&quot;alt text&quot; title=&quot;Отображение тэгов к статье&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;У Zola есть красивый сайт с документацией, но покрытие примерами довольно слабое.
И именно работу с тэгами авторы обошли стороной.&lt;&#x2F;p&gt;
&lt;p&gt;В документации есть два тематических раздела Taxonomies. 
Первый &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;taxonomies&#x2F;&quot;&gt;про настройку в конкретных постах&lt;&#x2F;a&gt;, а второй про &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;templates&#x2F;taxonomies&#x2F;&quot;&gt;использование в шаблонах&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Таксоно́мия (от др.-греч. τάξις — строй, порядок и νόμος — закон) — учение о принципах и практике классификации и систематизации&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Разделы содержат три вида сущностей:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;tags - тэги&lt;&#x2F;li&gt;
&lt;li&gt;categories - категории&lt;&#x2F;li&gt;
&lt;li&gt;authors - авторы&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nastroika&quot;&gt;Настройка&lt;&#x2F;h2&gt;
&lt;p&gt;Например, мне нужно выводить тэги к посту сразу под его заголовком (frontmatter).&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;В файле-конфигурации темы &lt;code&gt;theme.toml&lt;&#x2F;code&gt; нужно подключить taxonomies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;taxonomies = [
    {name = &quot;tags&quot;, rss = true}
]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;В шаблоне &lt;code&gt;page.html&lt;&#x2F;code&gt; добавить HTML-код&lt;br &#x2F;&gt;
Каждая страница имеет глобальную переменную &lt;code&gt;page&lt;&#x2F;code&gt;, которая содержит словарь &lt;code&gt;taxonomies&lt;&#x2F;code&gt;. 
Чтобы достучаться до тэгов, нужно обратиться к одноименному ключу - &lt;code&gt;tags&lt;&#x2F;code&gt;.
Результат будет содержать массив тэгов.
Затем использовать цикл for чтобы пробежаться по списку.&lt;&#x2F;p&gt;
&lt;p&gt;Например, вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;{% for tagName in page.taxonomies[&#x27;tags&#x27;] %}
    &lt;a class=&quot;btn btn-tiny btn-light&quot; href=&quot;&#x2F;tags&#x2F;{{tagName}}&#x2F;&quot;&gt;{{tagName}}&lt;&#x2F;a&gt;
{% endfor %}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Настроить тэги для поста&lt;br &#x2F;&gt;
Во frontmatter-части файла с постом нужно добавить описание тэгов. Например, вот так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[taxonomies]
tags = [&quot;zola&quot;]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Пример отображения тэгов вы можете увидеть сразу под заголовком данной статьи.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drugie-stat-i-pro-zola&quot;&gt;Другие статьи про Zola&lt;&#x2F;h2&gt;
&lt;p&gt;По тэгу &lt;a href=&quot;&#x2F;tags&#x2F;zola&quot;&gt;zola&lt;&#x2F;a&gt; вы можете найти другие статьи из этого цикла.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Как подключить готовую тему к проекту на Zola</title>
		<published>2020-01-03T00:00:00+00:00</published>
		<updated>2020-01-03T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/zola-set-theme/" type="text/html"/>
		<id>https://b.tinyops.ru/zola-set-theme/</id>
		<content type="html">&lt;p&gt;Прежде чем рассказать о том как подключить готовую тему стоит отметить что каждая тема в Zola это по сути такой же проект
как и ваш сайт. Одно из незначительных отличий - наличие файла &lt;code&gt;theme.toml&lt;&#x2F;code&gt;, в котором описывается конфигурация темы.&lt;&#x2F;p&gt;
&lt;p&gt;Меня порадовал такой подход, поэтому у меня не вызвало каких-либо проблем собрать 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lebe-dev&#x2F;tinyblog-zola-theme&quot;&gt;свою тему&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gde-naiti-gotovye-temy-dlia-zola&quot;&gt;Где найти готовые темы для Zola&lt;&#x2F;h2&gt;
&lt;p&gt;К сожалению, Zola еще молодой проект поэтому пока еще нет такого изобилия тем как у конкурентов.&lt;&#x2F;p&gt;
&lt;p&gt;Каталог тем с preview - &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-ustanovit-temu-dlia-svoego-saita&quot;&gt;Как установить тему для своего сайта&lt;&#x2F;h2&gt;
&lt;p&gt;Дальнейшая инструкция расчитана на то что вы имеете опыт работы с &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;ru&#x2F;v2&#x2F;%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git&quot;&gt;git&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Выбираем тему из галереи
Я буду рассказывать на примере моей темы - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lebe-dev&#x2F;tinyblog-zola-theme&quot;&gt;TinyBlog&lt;&#x2F;a&gt;, 
она есть в свободном доступе на github.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Создадим подкаталог в котором будут хранится файлы темы которую выбрали:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;mkdir themes\tinyblog
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Добавим модуль тему как git модуль:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;git submodule add https:&#x2F;&#x2F;github.com&#x2F;lebe-dev&#x2F;tinyblog-zola-theme themes&#x2F;tinyblog
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Подкачаем актуальную версию темы:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;git submodule update --init --recursive 
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;либо заходим в каталог тем и делаем pull:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;cd themes
git clone https:&#x2F;&#x2F;github.com&#x2F;lebe-dev&#x2F;tinyblog-zola-theme tinyblog
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Настраиваем файл конфигурации сайта&lt;&#x2F;p&gt;
&lt;p&gt;В файле конфигурации &lt;code&gt;config.toml&lt;&#x2F;code&gt; указываем тему:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;theme = &quot;tinyblog&quot; 
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Открываем сайт в браузере и видим что тема применилась.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;esli-sait-perestal-sobirat-sia&quot;&gt;Если сайт перестал собираться&lt;&#x2F;h2&gt;
&lt;p&gt;Возможно тема требует каких-то специфичных настроек, про которые можно прочитать на github страничке темы.&lt;&#x2F;p&gt;
&lt;p&gt;Либо проблема из разряда популярных, я описал &lt;a href=&quot;&#x2F;zola-issues&#x2F;&quot;&gt;пару решений&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drugie-stat-i-pro-zola&quot;&gt;Другие статьи про Zola&lt;&#x2F;h2&gt;
&lt;p&gt;По тэгу &lt;a href=&quot;&#x2F;tags&#x2F;zola&quot;&gt;zola&lt;&#x2F;a&gt; вы можете найти другие статьи из этого цикла.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Структура каталогов в Zola</title>
		<published>2020-01-02T00:00:00+00:00</published>
		<updated>2020-01-02T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/zola-structure/" type="text/html"/>
		<id>https://b.tinyops.ru/zola-structure/</id>
		<content type="html">&lt;p&gt;После создания нового проекта в каталоге появится следующая структура:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;├── config.toml
├── content
├── sass
├── static
├── templates
└── themes
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Далее - подробнее о каждом из объектов.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fail-konfiguratsii&quot;&gt;Файл конфигурации&lt;&#x2F;h3&gt;
&lt;p&gt;Главный файл конфигурации проекта &lt;code&gt;config.toml&lt;&#x2F;code&gt; хранится в корневом каталоге.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;katalog-content&quot;&gt;Каталог content&lt;&#x2F;h3&gt;
&lt;p&gt;Здесь хранятся посты или контент сайта. Zola поддерживает формат Markdown, 
поэтому файлы должны оканчиваться расширением &lt;code&gt;.md&lt;&#x2F;code&gt;. Каждый подкаталог в директории &lt;code&gt;content&lt;&#x2F;code&gt; представляет собой секцию, 
которая хранит в себе страницы (аналогично - &lt;code&gt;.md&lt;&#x2F;code&gt; файлы).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;katalog-sass&quot;&gt;Каталог sass&lt;&#x2F;h3&gt;
&lt;p&gt;Содержит в себе Sass файлы. В процессе работы Zola комплирует их в css.&lt;&#x2F;p&gt;
&lt;p&gt;Например, файл &lt;code&gt;sass&#x2F;something&#x2F;site.scss&lt;&#x2F;code&gt; в итоговом варианте будет лежать вот так - &lt;code&gt;public&#x2F;something&#x2F;site.css&lt;&#x2F;code&gt;.
Структура подкаталогов сохраняется.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;katalog-static&quot;&gt;Каталог static&lt;&#x2F;h3&gt;
&lt;p&gt;Содержит любые типы файлов и каталоги. Содержимое каталога &lt;code&gt;static&lt;&#x2F;code&gt; копируется 1 в 1 при сборке проекта.
Zola поддерживает жесткие ссылки (hardlink), это полезно при публикации. Оригинальный файл не будет копироваться в каталог
&lt;code&gt;public&lt;&#x2F;code&gt;, вместо этого будет создана ссылка.
Эта опция включается в &lt;code&gt;config.toml&lt;&#x2F;code&gt; параметром &lt;code&gt;hard_link_static = true&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;katalog-templates&quot;&gt;Каталог templates&lt;&#x2F;h3&gt;
&lt;p&gt;Содержит в себе файлы шаблонов. Zola работает с шаблонизатором &lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.com&#x2F;&quot;&gt;Tera&lt;&#x2F;a&gt; от компании Netlify.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;katalog-themes&quot;&gt;Каталог themes&lt;&#x2F;h3&gt;
&lt;p&gt;Содержит темы которые может использовать текущий проект. Если вы не планируете использовать темы, то оставьте этот
каталог пустым.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drugie-stat-i-pro-zola&quot;&gt;Другие статьи про Zola&lt;&#x2F;h2&gt;
&lt;p&gt;По тэгу &lt;a href=&quot;&#x2F;tags&#x2F;zola&quot;&gt;zola&lt;&#x2F;a&gt; вы можете найти другие статьи из этого цикла.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Генератор статических сайтов Zola</title>
		<published>2020-01-01T00:00:00+00:00</published>
		<updated>2020-01-01T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/zola-intro/" type="text/html"/>
		<id>https://b.tinyops.ru/zola-intro/</id>
		<content type="html">&lt;p&gt;Я узнал о &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; из пятничной рассылки HackerNews. Так как в описании проекта значился Rust, 
то я предположил что это должно быть как минимум очень быстрое решение.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;zola&#x2F;zola-official-site.png&quot; alt=&quot;alt text&quot; title=&quot;Официальный сайт Zola&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;В 2019-м я собрал 2 проекта на базе генератора &lt;a href=&quot;https:&#x2F;&#x2F;gohugo.io&#x2F;&quot;&gt;Hugo&lt;&#x2F;a&gt; и не сказал бы что это был приятный опыт.
Одна из главных бед Hugo это наследие языка Go. Вроде бы они и позиционируют себя как 
&lt;em&gt;&amp;quot;самый быстрый генератор статических сайтов в мире&amp;quot;&lt;&#x2F;em&gt; (хотя на момент существования Zola это спорно), 
но борьба с шаблонизатором Go изнуряет.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я решил попробовать Zola, да и язык Rust очень люблю. Официальный сайт гордо сообщает о преимуществах:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;У нас нет зависимостей&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Генератор поставляется в виде 1 файла, со встроенным процессором &lt;a href=&quot;https:&#x2F;&#x2F;sass-lang.com&#x2F;&quot;&gt;Sass&lt;&#x2F;a&gt;, 
подсветкой синтаксиса, списком содержанием и т.д.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Мы чертовски быстрые&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Средний по размеру сайт собирается меньше чем за 1 секунду, включая компиляцию Sass-файлов и подсветку синтаксиса&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Масштабируемые&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Zola строит весь сайт в виде статических файлов, тем самым делая сайт готовым к очень высоким нагрузкам. Не нужно думать
об администрировании серверов или баз данных &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Простые в использовании&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Гибкие&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Zola решает множество популярных проблем, тем самым не мешая вам сосредоточиться на контенте который вы создаете для
сайта, блога, базы знаний и т.д.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;У нас дополненный Markdown&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Приложение поддерживает расширения для Markdown, позволяющие добавить еще больше возможностей в разметку. Например,
вставлять видео с YouTube с пререндерингом или делать ссылки-якоря.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Круто! Я прежде всего купился на скорость, встроенный Sass-компилятор и простоту шаблонизатора.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-ustanovit-zola&quot;&gt;Как установить Zola&lt;&#x2F;h2&gt;
&lt;p&gt;Респект авторам за то что позаботились о всем том зоопарке операционных систем который есть на момент 2020 года. 
Мне не нужно поднимать окружение разработчика Rust чтобы собрать исполняемый файл под мою ОС. 
Поддерживаются самые популярные ОС (Windows, MacOS), различные редакции Linux и даже FreeBSD.&lt;&#x2F;p&gt;
&lt;p&gt;Для Windows предпочитаю &lt;a href=&quot;http:&#x2F;&#x2F;scoop.sh&#x2F;&quot;&gt;Scoop&lt;&#x2F;a&gt;, то и ставил через него:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;scoop install zola
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Вот и все :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-sozdat-novyi-proekt&quot;&gt;Как создать новый проект&lt;&#x2F;h2&gt;
&lt;p&gt;Достаточно запустить zola с командой &lt;code&gt;init&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;zola init
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Zola спросит пару вопросов в интерактивном режиме и скелет проекта сайта будет готов.
Чтобы задать имя каталога, то его можно указать последним аргументом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;zola init awesome-blog
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;kak-zapustit-zola-v-rezhime-razrabotki&quot;&gt;Как запустить Zola в режиме разработки&lt;&#x2F;h2&gt;
&lt;p&gt;Режим разработки позволяет смотреть на итоговый результат в режиме реального времени. Любые изменения в каталоге проекта
будут мгновенно отображаться в браузере.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;zola serve
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;По умолчанию приложение будет доступно в браузере по адресу &lt;a href=&quot;http:&#x2F;&#x2F;127.0.0.1:1111&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:1111&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-sobrat-production-ready-sborku&quot;&gt;Как собрать production-ready сборку&lt;&#x2F;h2&gt;
&lt;p&gt;Production-ready сборка это сборка которая скомпонована генератором с учетом всех возможных оптимизаций. Она готова
для того чтобы загрузить на ваш сайт.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell script&quot; class=&quot;language-shell script &quot;&gt;&lt;code class=&quot;language-shell script&quot; data-lang=&quot;shell script&quot;&gt;zola build --base-url $DEPLOY_URL
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Где &lt;code&gt;$DEPLOY_URL&lt;&#x2F;code&gt; - адрес по которому будет крутиться сайт.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drugie-stat-i-pro-zola&quot;&gt;Другие статьи про Zola&lt;&#x2F;h2&gt;
&lt;p&gt;По тэгу &lt;a href=&quot;&#x2F;tags&#x2F;zola&quot;&gt;zola&lt;&#x2F;a&gt; вы можете найти другие статьи из этого цикла.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
