<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Блог TinyOps - java</title>
	<subtitle>О технологиях, подходах и решении проблем простым языком</subtitle>
	<link href="https://b.tinyops.ru/tags/java/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://b.tinyops.ru"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-08-10T00:00:00+00:00</updated>
	<id>https://b.tinyops.ru/tags/java/atom.xml</id>
	<entry xml:lang="en">
		<title>Как добавить самоподписной SSL-сертификат для JVM в Docker</title>
		<published>2021-08-10T00:00:00+00:00</published>
		<updated>2021-08-10T00:00:00+00:00</updated>
		<link href="https://b.tinyops.ru/kak-to-install-self-signed-ssl-cert-in-docker/" type="text/html"/>
		<id>https://b.tinyops.ru/kak-to-install-self-signed-ssl-cert-in-docker/</id>
		<content type="html">&lt;p&gt;Представим что у нас есть Java-приложение, которое делает запросы к другим Web-сервисам. В свою очередь, Web-сервисы работают с HTTPS, но сертификат доверенный только для домена компании.&lt;&#x2F;p&gt;
&lt;p&gt;В логах приложения подобные ошибки:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.security.ssl.Alert.createSSLException(Alert.java:131)
    at sun.security.ssl.TransportContext.fatal(TransportContext.java:324)
    at sun.security.ssl.TransportContext.fatal(TransportContext.java:267)
    at sun.security.ssl.TransportContext.fatal(TransportContext.java:262)
    at sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts(CertificateMessage.java:654)
    at sun.security.ssl.CertificateMessage$T12CertificateConsumer.onCertificate(CertificateMessage.java:473)
    at sun.security.ssl.CertificateMessage$T12CertificateConsumer.consume(CertificateMessage.java:369)
    at sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:377)
    at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:444)
    at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:422)
    at sun.security.ssl.TransportContext.dispatch(TransportContext.java:182)
    at sun.security.ssl.SSLTransport.decode(SSLTransport.java:152)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Нам необходимо добавить самоподписной корневой сертификат в хранилище сертификатов JVM.&lt;&#x2F;p&gt;
&lt;p&gt;В JVM сертификаты хранятся в файле-хранилище &lt;code&gt;${JAVA_HOME}&#x2F;jre&#x2F;lib&#x2F;cacerts&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Находим где располагается JVM, для этого заходим в контейнер приложения:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;docker exec -it app &#x2F;bin&#x2F;bash
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;и ищем:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;root@458b6bbf28b5:&#x2F;app# whereis java
java: &#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;bin&#x2F;java
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Соответственно, наш &lt;code&gt;JAVA_HOME&lt;&#x2F;code&gt; это &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;openjdk-8&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь выходим из контейнера и копируем каталог &lt;code&gt;security&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;docker cp app:&#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;jre&#x2F;lib&#x2F;security .
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Правим &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; для проброса каталога внутрь контейнера:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;version: &#x27;3.3&#x27;

services:

  app:
    container_name: app
    image: registry.company.ru&#x2F;app:1.3.7-12
    restart: always
    volumes:
     - .&#x2F;application.properties:&#x2F;app&#x2F;application.properties
     - .&#x2F;data:&#x2F;app&#x2F;data
     - .&#x2F;logs:&#x2F;app&#x2F;logs
     - .&#x2F;security:&#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;jre&#x2F;lib&#x2F;security
    ports:
     - &quot;35000:8080&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Добавляем сертификат в файл &lt;code&gt;cacerts&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;keytool -importcert -keystore security&#x2F;cacerts -file custom-ca.crt -alias &quot;custom-ca&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Пароль по умолчанию для доступа в хранилище &lt;code&gt;changeit&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Рестартуем приложение:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose down
docker-compose up -d
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
